// -*- Pike -*-
//
// Configuration file for generating the nettle git repository
// from the lsh cvs reposotiory.

inherit GitHandler;

// Filter and relocate the directories
// /src/symmetric, /src/nettle and /nettle to the root.
//
// But keep the original paths in the commit messages.
array(string|array(string)) enter_directory(GitRepository git, string path,
					    array(string) files,
					    GitFlags flags, mapping state,
					    string display_path)
{
  if (!has_value(path, "/") && !state->found) {
    switch(path) {
    case "":
      files &= ({ "nettle", "src", "misc",
		  "config.guess,v", "config.sub,v", "aclocal.m4,v",
		  "install-sh,v", "texinfo.tex,v", "INSTALL,v" });
      // Puts "nettle" before "src"
      sort (files);
      break;
    case "src":
      files &= ({ "symmetric", "nettle" });
      if (sizeof(files) == 2) {
	// Ensure that the files are handled in a deterministic order,
	// newest first.
	files = ({ "nettle", "symmetric" });
      }
      path = "";
      break;
    case "nettle":
    case "symmetric":
      path = "";
      state->found = 1;
      break;
    case "misc":
      files &= ({ "run-tests,v", "getopt.c,v", "getopt1.c,v", "getopt.h,v" });
      path = "";
      break;
    }
  }
  return ({ path, files, display_path });
}

void repair_rcs_file(GitRepository git, string path, RCSFile rcs_file,
		     GitFlags flags)
{
  foreach(([
	    "lsh_1_2_BRANCH":"2001.04.04.18.23.58",
	    "lsh_1_4_2_BRANCH":"2002.07.05.20.03.02",
	    "experimental_BRANCH_20050201":"2005.02.01.19.30.48",
	    "lsh_2_0_4_BRANCH":"2006.05.09.18.16.30",
	  ]); string branch; string rcs_time) {

    // Fixup the names of the branches.
    string rev = m_delete(rcs_file->tags, branch);
    branch = replace(replace(branch, "_BRANCH", ""),
		     ({ "lsh_", "experimental_" }),
		     ({ "lsh-", "experimental-" }));
    if (rev) {
      rcs_file->tags[branch] = rev;
      continue;
    }

    // Ensure that no extra files are merged into the branches
    // except those that were active at the time of the branch.
    string branch_rev = find_revision(rcs_file, UNDEFINED, rcs_time);
    if (!branch_rev) kill_branch(rcs_file, branch);
    else add_branch(rcs_file, branch, branch_rev);
  }

  RCSFile.Revision rev;
  if ((rev = rcs_file->revisions[rcs_file->head])->state == "dead") {
    // Is this one of the files that were moved in
    // one of the renames?

    // Check whether there's already a corresponding git commit,
    // in which case the file probably was just moved and not deleted.
    GitRepository.GitCommit commit = git->git_commits[path + ":1.1"];
    if (commit) {
      hide_revision(rcs_file, rcs_file->head);
    }
  }

  switch(path) {
    case "ChangeLog":
      RCSFile.Revision merge_rev = rcs_file->revisions["1.393"];
      // Create a merge link for the experimental_BRANCH_20050201.
      if (merge_rev) merge_rev->merges = ({ "1.318.2.1" });
      break;
  }
}

void create(GitRepository git, GitFlags flags)
{
  ::create(git, flags);

  string authors_file = combine_path(__FILE__, "../lsh-authors");
  if (Stdio.exist(authors_file)) {
    git->authors |= git->read_authors_file(authors_file);
  }

  string contributors_file = combine_path(__FILE__, "../lsh-real-authors");
  if (Stdio.exist(contributors_file)) {
    array(string) lines = Stdio.read_bytes(contributors_file)/"\n";
    foreach(lines; int no; string line) {
      foreach(({ "nettle/", "src/nettle/", "src/symmetric/" }), string prefix) {
	if (has_prefix(line, prefix)) {
	  lines[no] = line[sizeof(prefix)..];
	  break;
	}
      }
      if (lines[no] == line) lines[no] = "";
    }

    lines -= ({ "" });
    lines += ({ "" });

    git->parse_contributors(lines*"\n", contributors_file);
  }
}
