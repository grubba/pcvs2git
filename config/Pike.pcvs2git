// -*- Pike -*-
//
// Configuration file for generating the Pike Git repository
// from the Pike CVS repository.
//
// 2009-10-25 Henrik Grubbström

// TODO
//
//   * The ChangeLog for ulpc.hubbe starts at ulpc 1.0E-15,
//     which is slightly before the repository itself.
//     find the dists inbetween, and recreate the history.
//     Relevant dists: 1.0E-15, 1.1E-15, 1.0E-14, 1.1E-14.
//
//   * Find, date and incorporate even older dists of ulpc.
//
//   * Force release tags to be on one of the main branches?
//
// STATUS
//
//   [X] ulpc -> Pike
//   [X] Pike 0.5 // Pike 0.6 (98.01.04.21.09.25 // 97.12.22.23.22.19)
//   [X] Pike 0.6 // Pike 7.0 (99.01.01.00.50.09 // 99.01.01.01.03.35)
//   [X] Pike 7.0 // Pike 7.2 (2000.04.11.18.43.39 // 2000.04.11.18.33.47)
//   [X] Pike 7.2 // Pike 7.4 (2001.01.30.07.10.46 // 2001.01.30.07.10.57)
//   [X] Pike 7.4 // Pike 7.6 (2002.12.05.20.08.59 // 2002.12.05.17.55.35)
//   [X] Pike 7.6 // Pike 7.8 (2004.04.26.00.13.32 // 2004.04.26.00.47.13)


// The graph for Pike currently looks something like:
//
// 0.5 0.6 7.0 7.2 7.4 7.6 7.8   Active branches.
//  |   |   |   |   |   |   |
//  |   |   |   |   |   |   /
//  |   |   |   |   |   |  /
//  |   |   |   |   |   | /
//  |   |   |   |   |   |/
//  |   |   |   |   |   /
//  |   |   |   |   |  /
//  |   |   |   |   | /
//  |   |   |   |   |/
//  |   |   |   |   /
//  |   |   |   |  /
//  |   |   |   | /
//  |   |   |   |/
//  |   |   |   /
//  |   |   |  /
//  |   |   | /
//  |   |   |/
//  |   |   /
//  |   |  /
//  |   | /
//  |   |/
//  |   /
//  |  /
//  | /
//  |/
//  |      The Pike repositories; all have a common root (v0.1),
//  |\     which merged the ulpc and spider repositories.
//  | \    The diagonal above is the development branch.
//  |  \
//  |   |
// =======
// ulpc spider
//  |   |
//  |  /|
//  | / |
//  |X  |
//  |   |
//  |  /|
//  | / |
//  |X  |
//  |   |  The ulpc.hubbe (ulpc), ulpc.lost-doc (ulpc)
//  |  /|  and ulpc (spider) repositories.
//  | / |
//  |X  |
//  |   |
//  |  /|
//  | / |
//  |X  |  ulpc starts with Neotron's import of 1.0E-13.
//  |   |  ulpc.hubbe and ulpc.lost-doc start at ~1.3E-14.
// =======
//  |   |
//  |  /|
//  | / |
//  |/  |
//  |   |
//  |  /|  The ulpc.old repository. Artificially
//  | / |  split into ulpc and spider branches.
//  |/  |
//  |   |
//  |  /|
//  | / |
//  |/  |
//  |   |
//  |  /
//  | /
//  |/
//  |      Neotron's initial import of uLPC 1.0E-30.
//

inherit GitHandler;

void describe_rcs_file(GitRepository git, RCSFile rcs_file, string|void path)
{
  werror("Path: %O(%O) (master_branch: %O)\n"
	 "Head: %O branch: %O\n",
	 path||"", rcs_file->rcs_file_name, git->master_branch,
	 rcs_file->head, rcs_file->branch);
  array(RCSFile.Revision) revisions = values(rcs_file->revisions);
  sort(revisions->time->unix_time(), revisions);
  foreach(revisions, RCSFile.Revision rev) {
    if (rev->ancestor) {
      werror("  %s(%s)\t==> %s%s\n",
	     rev->revision, ctime(rev->time->unix_time()) - "\n", rev->ancestor,
	     (rev->revision_flags & GIT_REVISION_MERGE)?" (MERGE)":"");
    } else {
      werror("  %s(%s)\t==> NULL\n",
	     rev->revision, ctime(rev->time->unix_time()) - "\n");
    }
  }
}

GitRepository.Leafset pike_module_leaves = 0;

array(string|array(string)) enter_directory(GitRepository git, string path,
					    array(string) files,
					    GitFlags flags, mapping state)
{
  m_delete(state, "orig_master");
  m_delete(state, "flush");
  if (state->search) {
    switch(path) {
    case "2.2":
      // Pike 7.2.399
    case "2.4":
      // Pike 7.2.449
    case "3.3":
      // Pike 7.2.501
    case "3.4":
      // Pike 7.2.591
      state->orig_master = git->master_branch;
      git->set_master_branch("roxen/7.2");
      files = ({ "c", "pike-modules" });
      path = "";
      git->git_refs[git->remote + git->master_branch]->
	hook_parent(git->git_refs[git->remote + "7.2"]);
      break;
    case "4.0":
      // Pike 7.4.64
    case "4.5":
      // Pike 7.4.266
      state->orig_master = git->master_branch;
      git->set_master_branch("roxen/7.4");
      files = ({ "c", "pike-modules" });
      path = "";
      git->git_refs[git->remote + git->master_branch]->
	hook_parent(git->git_refs[git->remote + "7.4"]);
      break;
    case "5.0":
      // Roxen 5.0 ==> Pike 7.8
      state->orig_master = git->master_branch;
      git->set_master_branch("roxen/7.8");
      files = ({ "c", "pike-modules" });
      path = "";
      git->git_refs[git->remote + git->master_branch]->
	hook_parent(git->git_refs[git->remote + "7.8"]);
      break;
    case "c":
      path = "src/modules";
      break;
    case "pike-modules":
      path = "lib/modules";
      break;
    }
  } else if (!has_value(path, "/")) {
    switch(path) {
    case "":
      // Reorder to have the stand-alone repositories first.
      array(string) new_files = ({});
      foreach(({ "extra_tests",
		 "ulpc.old", "ulpc.lost-doc", "ulpc.hubbe", "ulpc" }),
	      string dir) {
	if (has_value(files, dir)) {
	  new_files += ({ dir });
	}
      }
      files -= new_files;
      // Filter the commercial fonts directory.
      files -= ({ "tutorial-fonts" });
      if (has_value(files, "nt-tools")) {
	// Ensure that nt-tools comes last.
	files -= ({ "nt-tools" });
	files += ({ "nt-tools" });
      }
      files = new_files + files;
      if (has_value(files, "devel") && has_value(files, "7.8")) {
	// No need to scan 7.8 twice.
	files -= ({ "devel" });
      }
      break;      
    case "extra_tests":
      state->orig_master = git->master_branch;
      state->flush = 1;
      git->set_master_branch("extra-tests");
      path = "";
      break;
    case "ulpc.old":
      // This is based on an import of an old
      // (starting at ~1.0E-30) ulpc repository
      // which is merged with the spider repository.
      state->orig_master = git->master_branch;
      state->flush = 1;
      git->set_master_branch("ulpc");
      git->set_master_branch("spider");
      path = "";
      break;
    case "ulpc.lost-doc":
      // This is a fixup repository containing some documentation
      // files that were lost in ulpc.hubbe, and were recovered
      // from ulpc dists.
      state->orig_master = git->master_branch;
      git->set_master_branch("ulpc");
      git->add_root_commit(git->remote + "ulpc");
      path = "";
      break;
    case "ulpc.hubbe":
      // This is hubbe's repository from Signum and Infovav.
      // It starts slightly after 1.1E-14.
      state->orig_master = git->master_branch;
      state->flush = 1;
      state->orig_fuzz = git->fuzz;
      git->fuzz = 600;	// 10 minutes.
      git->set_master_branch("ulpc");
      if (!sizeof(git->git_commits)) {
	git->add_root_commit(git->remote + "ulpc");
      }
      path = "";
      break;
    case "ulpc":
      // This is an ulpc repository starting at an import of
      // the 1.0E-13 dist of ulpc merged with the spider repository.
      state->orig_master = git->master_branch;
      state->flush = 1;
      git->set_master_branch("spider");
      git->add_root_commit("spider");
      string prev_root;
      prev_root = git->add_root_commit("tags/v1.0E-13");
      prev_root = git->add_root_commit("tags/v1.0E-12", 816252442, prev_root);
      prev_root = git->add_root_commit("tags/v1.5E-12", 816436516, prev_root);
      prev_root = git->add_root_commit("tags/v1.6E-12", 816509278, prev_root);
      prev_root = git->add_root_commit("tags/v1.7E-12~20", 824139593, prev_root);
      path = "";
      break;
    case "0.5":
      state->orig_master = git->master_branch;

      // These were developed in separate repositories.
      foreach(({ "GL", "IMAP.pmod", "Remote.pmod" }),
	      string pike_module) {
	git->set_master_branch("pike-modules/" + pike_module);
	pike_module_leaves |=
	  git->git_refs[git->remote + git->master_branch]->is_leaf;
      }
      git->set_master_branch("0.5");
      path = "";
      foreach(({ "ulpc", "spider" }), string root) {
	string r_uuid = git->add_root_commit(git->remote + root);
	GitRepository.GitCommit r = git->git_commits[r_uuid];
	// Make sure these roots aren't compatible with
	// any of the pike-modules branches.
	r->propagate_dead_leaves(pike_module_leaves);
      }
      // These were copied from older repositories after the split.
      foreach(({ "pre_ldap_split" }), string tag) {
	GitRepository.GitCommit t = git->ref_factory("tags/" + tag);
	pike_module_leaves |= t->is_leaf;
      }
      // Ensure that the branches are created in the correct order,
      // since the branch order is used when resolving deletions.
      foreach(({ "0.5", "0.6", "7.0", "7.2", "7.4", "7.6", "7.8" }),
	      string br) {
	string tag = git->remote + br;
	if (!git->git_refs[tag]) {
	  git->git_refs[tag] = git->GitCommit(tag);
	}
      }
      break;

      // A couple of special-cases for ancient names.
    case "0.6-stable":
      path = "0.6";
      // FALL_THROUGH
    case "7.3_last_ris_master":
      if (has_prefix(path, "7.3")) path = "7.4";
      // FALL_THROUGH
    case "7.7":
    case "devel":
      if (has_prefix(path, "7.7") || has_prefix(path, "devel")) path = "7.8";
      // FALL_THROUGH
    case "0.6": case "7.0":
    case "7.2": case "7.4": case "7.6":
    case "7.8": case "nt-tools":
      state->orig_master = git->master_branch;
      git->set_master_branch(replace(path, "_", "-"));
      path = "";
      break;

    case "Search":
      state->search = 1;
      path = "";
      break;
    }
  } else if ((path == "src/modules/_WhiteFish") &&
	     !has_prefix(git->master_branch, "roxen/")) {
    // _WhiteFish was developed at Roxen, and not present in the
    // main Pike repositories.
    state->orig_master = git->master_branch;
    git->set_master_branch("roxen/" + git->master_branch);
    // The Roxen branch is a true superset of the corresponding Pike branch.
    git->git_refs[git->remote + git->master_branch]->
      hook_parent(git->git_refs[git->remote + state->orig_master]);
  }
  return ({ path, files });
}

void leave_directory(GitRepository git, string path, array(string) files,
		     GitFlags flags, mapping state)
{
  if (!zero_type(state->orig_master)) {
    // Propagate deletions for permanently deleted files.
    // This is needed to keep filter_commits() happy futher down.
    switch(git->master_branch) {

    case "spider":
      git->latest_master_branch = git->remote + "ulpc";
      break;

    case "0.6":
      // Protocols.X.Xlib 1.1
      branch_dependancy(git, "0.5", "0.6", "97.12.22.20.28.51");
      break;
    case "7.0":
      // .cvsignore 1.15
      branch_dependancy(git, "0.6", "7.0", "99.01.01.01.03.35");
      break;
    case "7.2":
      // ANNOUNCE 1.6
      branch_dependancy(git, "7.0", "7.2", "2000.04.11.18.33.47");
      break;
    case "7.4":
      // src/version.h 1.269
      branch_dependancy(git, "7.2", "7.4", "2001.01.30.07.10.57");
      break;
    case "7.6":
      // src/version.h 1.334
      branch_dependancy(git, "7.4", "7.6", "2002.12.05.17.55.35");
      break;
    case "7.8":
      // src/version.h 1.359
      branch_dependancy(git, "7.6", "7.8", "2004.04.26.00.47.13");
      break;

    case "nt-tools":
      // Somewhere between 7.1.39(2001.01.16.10.43.59) and
      //                   7.1.40(2001.01.16.13.14.53).
      branch_dependancy(git, "7.2", "nt-tools", "2001.01.16.12.00.00");
      git->latest_master_branch = git->remote + "7.8";
      break;
    }
    // Unify the commits, to reduce confusion when other
    // branches are added.
    if (state->flush) {
      git_progress(flags, "\nFlushing branch %s...\n", git->master_branch);
      git->flush(flags);
      git_progress(flags, "\nContinuing import...\n");
    }
    git->master_branch = state->orig_master;
    if (state->orig_master) {
      git->latest_master_branch = git->remote + state->orig_master;
    }
    if (state->orig_fuzz) {
      git->fuzz = state->orig_fuzz;
    }
  }
}

void rake_leaves(GitRepository git)
{
  if (git->git_refs[git->remote + "0.5"]) {
    // We're in the last pass.
    branch_dependancy(git, "0.5", "0.6", "97.12.22.20.28.51"); // Protocols.X.Xlib 1.1
    branch_dependancy(git, "0.6", "7.0", "99.01.01.01.03.35"); // .cvsignore 1.15
    branch_dependancy(git, "7.0", "7.2", "2000.04.11.18.33.47"); // ANNOUNCE 1.6
    branch_dependancy(git, "7.2", "7.4", "2001.01.30.07.10.57"); // src/version.h 1.269
    branch_dependancy(git, "7.4", "7.6", "2002.12.05.17.55.35"); // src/version.h 1.334
    branch_dependancy(git, "7.6", "7.8", "2004.04.26.00.47.13"); // src/version.h 1.359

    branch_dependancy(git, "7.2", "nt-tools", "2001.01.16.12.00.00"); // between 7.1.39 and 7.1.40
  } else if (git->git_refs[git->remote + "ulpc"] &&
	     git->git_commits["src/main.c:1.1"] &&
	     (git->git_commits["src/main.c:1.1"]->timestamp < 814522110)) {
    // NB: O(n²), but there's only a few matches, so it should be ok.
    foreach(git->git_commits; string c_uuid; GitRepository.GitCommit c) {
      if (c->commit_flags & GitRepository.COMMIT_HIDE) continue;
      string path = (c_uuid/":")[0];
      if (has_prefix(path, "src/modules/pipe/") ||
	  has_prefix(path, "src/modules/spider/")) continue;

      string match_path;

      if (has_suffix(path, "/configure") ||
	  has_suffix(path, "/Makefile") ||
	  has_suffix(path, "/file_machine.h")) {
	match_path = path + ".in";
      }
      if (match_path) {
	match_path += ":";
	GitRepository.GitCommit match;
	foreach(git->git_commits; string p_uuid; GitRepository.GitCommit p) {
	  if ((p->timestamp > (c->timestamp + git->fuzz)) ||
	      (p->timestamp < (c->timestamp - git->fuzz)) ||
	      !has_prefix(p_uuid, match_path) ||
	      (p->commit_flags & GitRepository.COMMIT_HIDE)) continue;
	  if (match) {
	    // Multiple matches, try to find the closest in time.
	    int delta_p = c->timestamp - p->timestamp;
	    if (delta_p < 0) delta_p = -delta_p;
	    int delta_m = c->timestamp - match->timestamp;
	    if (delta_m < 0) delta_m = -delta_m;
	    if (delta_m < delta_p) continue;
	  }
	  match = p;
	}
	if (match) {
	  c->hook_parent(match);
	  c->propagate_dead_leaves(match->leaves - c->leaves);
	}
      }
    }
  }

  if (git->git_refs[git->remote + "a111"] && !git->git_refs["tags/a111"]) {
    // The symbol a111 is obscure in that it is both a tag and a branch,
    // which is something that Parser.RCS doesn't expect...
    // Fortunately it's easy to fix, since they both point to the same commit.
    GitRepository.GitCommit a111_tag = git->git_refs["tags/a111"] =
      git->GitCommit("tags/a111");
    a111_tag->hook_parent(git->git_refs[git->remote + "a111"]);
  }
}

void repair_rcs_file(GitRepository git, string path, RCSFile rcs_file,
		     GitFlags flags)
{
  if (rcs_file->revisions["1.1"]->time->unix_time() < 814522110) {
    // ulpc.old.
    // Check whether the file is relevant for the ulpc trunk as well.
    if (!has_prefix(path, "src/modules/spider/") &&
	!has_prefix(path, "src/modules/pipe/") &&
	!has_suffix(path, "/configure") &&
	!has_suffix(path, "/Makefile") &&
	!has_suffix(path, "/file_machine.h") &&
	!has_suffix(path, "/stamp-h") &&
	!has_suffix(path, "/modlist.h") &&
	!has_suffix(path, "/dependencies")) {

      string rev = rcs_file->head;
      if (rcs_file->branch) {
	rev = rcs_file->branch_heads[rcs_file->branch];
      }
      int split_time = 0x7fffffff;
	
      if ((path == "src/modules/files/file.c") ||
	  (path == "src/modules/files/socket.c")) {
	// Hide some kludges from the trunk.
	split_time = 814190208;
      }
      while (rev &&
	     (rcs_file->revisions[rev]->time->unix_time() >= split_time)) {
	rev = rcs_file->revisions[rev]->ancestor;
      }

      if (rev) {
	add_branch(rcs_file, "ulpc", rev);
      }

      // Many commits in ulpc.old are by neotron of ulpc dists by hubbe.
      if (rcs_file->revisions["1.1.1.1"]) {
	// The initial commit of v1.0E-30 (lots of files).
	rcs_file->revisions["1.1.1.1"]->actual_author = "hubbe";
      }
      // For the rest we perform a lookup:
      array(string) revs = ([
	"README":({"1.1",}),
	"bin/create_testsuite":({"1.2","1.3","1.4",}),
	"bin/hilfe.lpc":({"1.2",}),
	"bin/rsif":({"1.2",}),
	"bin/uhttpd.lpc":({"1.2",}),
	"doc/builtin/getpid":({"1.1",}),
	"doc/builtin/kill":({"1.1",}),
	"doc/builtin/signal":({"1.1",}),
	"doc/builtin/signame":({"1.1",}),
	"doc/builtin/signum":({"1.1",}),
	"doc/builtin/sleep":({"1.1",}),
	"doc/files/file":({"1.2","1.3",}),
	"doc/files/port":({"1.2",}),
	"doc/lpc/control_structures":({"1.2",}),
	"doc/lpc/hilfe.hilfe":({"1.2",}),
	"doc/lpc/preprocessor":({"1.1",}),
	"doc/lpc/reserved":({"1.1",}),
	"doc/regexp/regexp":({"1.2",}),
	"doc/simulated/open":({"1.1",}),
	"doc/simulated/popen":({"1.2",}),
	"doc/types/int":({"1.2",}),
	"doc/types/mapping":({"1.2",}),
	"lib/master.lpc":({"1.2",}),
	"lib/simulate.lpc":({"1.2","1.3","1.4","1.5",}),
	"lib/testsuite.lpc":({"1.2","1.3","1.4",}),
	"src/BUGS":({"1.2","1.3","1.4",}),
	"src/Makefile.in.src":({"1.2",}),
	"src/Makefile.in":({"1.3","1.6","1.8",}),
	"src/README":({"1.2","1.3",}),
	"src/add_efun.c":({"1.2",}),
	"src/add_efun.h":({"1.2",}),
	"src/alloca.c":({"1.2",}),
	"src/array.c":({"1.2","1.3","1.4",}),
	"src/array.h":({"1.2",}),
	"src/backend.c":({"1.2","1.3",}),
	"src/backend.h":({"1.2",}),
	"src/builtin_efuns.c":({"1.2","1.3",}),
	"src/builtin_efuns.h":({"1.2",}),
	"src/call_out.c":({"1.3","1.5","1.6",}),
	"src/call_out.h":({"1.2",}),
	"src/callback.c":({"1.2",}),
	"src/callback.h":({"1.2",}),
	"src/config.h":({"1.6","1.7",}),
	"src/configure.in":({"1.3","1.6","1.7","1.8","1.9",
			     "1.10","1.11","1.12",}),
	"src/debug.c":({"1.2","1.4",}),
	"src/debug.h":({"1.2","1.3","1.4",}),
	"src/docode.c":({"1.2","1.3","1.4",}),
	"src/docode.h":({"1.2",}),
	"src/dynamic_buffer.c":({"1.2","1.3",}),
	"src/dynamic_buffer.h":({"1.2",}),
	"src/efun.h":({"1.2",}),
	"src/error.c":({"1.2",}),
	"src/error.h":({"1.2",}),
	"src/fd_control.c":({"1.2",}),
	"src/fd_control.h":({"1.2",}),
	"src/fsort.c":({"1.2",}),
	"src/fsort.h":({"1.2",}),
	"src/global.h":({"1.2",}),
	"src/hashtable.c":({"1.2",}),
	"src/hashtable.h":({"1.2",}),
	"src/interpret.c":({"1.2","1.3","1.4","1.5","1.6",}),
	"src/interpret.h":({"1.2",}),
	"src/language.y":({"1.2","1.3","1.4","1.5",}),
	"src/las.c":({"1.2","1.3","1.4",}),
	"src/las.h":({"1.2","1.3",}),
	"src/lex.c":({"1.2","1.3","1.4",}),
	"src/lex.h":({"1.2","1.3",}),
	"src/list.c":({"1.2","1.3",}),
	"src/list.h":({"1.2",}),
	"src/lpc_signal.c":({"1.1",}),
	"src/lpc_signal.h":({"1.1",}),
	"src/lpc_types.c":({"1.2","1.3","1.4","1.5",}),
	"src/lpc_types.h":({"1.2","1.3",}),
	"src/machine.h.in":({"1.2","1.3",}),
	"src/macros.h":({"1.2","1.3","1.4",}),
	"src/main.c":({"1.4","1.5","1.8",}),
	"src/main.h":({"1.2",}),
	"src/mapping.c":({"1.2","1.3","1.4","1.5",}),
	"src/mapping.h":({"1.2",}),
	"src/memory.c":({"1.2","1.3",}),
	"src/memory.h":({"1.2",}),
	"src/module.c":({"1.2",}),
	"src/module.h":({"1.2",}),
	"src/modules/files/Makefile.in.src":({"1.2",}),
	"src/modules/files/Makefile.in":({"1.3","1.5",}),
	"src/modules/files/configure.in":({"1.5",}),
	"src/modules/files/datagram.c":({"1.2",}),
	"src/modules/files/efuns.c":({"1.4",}),
	"src/modules/files/file.c":({"1.2","1.3","1.5","1.6",}),
	"src/modules/files/file.h":({"1.2","1.3",}),
	"src/modules/files/file_machine.h.in":({"1.3",}),
	"src/modules/files/socket.c":({"1.2","1.4","1.6",}),
	"src/modules/math/Makefile.in.src":({"1.3",}),
	"src/modules/math/Makefile.in":({"1.4",}),
	"src/modules/math/math.c":({"1.2",}),
	"src/modules/regexp/Makefile.in.src":({"1.2",}),
	"src/modules/regexp/Makefile.in":({"1.3","1.5",}),
	"src/modules/regexp/glue.c":({"1.2",}),
	"src/modules/regexp/regexp.c":({"1.2","1.3",}),
	"src/modules/regexp/regexp.h":({"1.2",}),
	"src/modules/sprintf/Makefile.in.src":({"1.2",}),
	"src/modules/sprintf/Makefile.in":({"1.3","1.5",}),
	"src/modules/sprintf/sprintf.c":({"1.2",}),
	"src/object.c":({"1.2","1.3",}),
	"src/object.h":({"1.2",}),
	"src/opcodes.c":({"1.2","1.5","1.6",}),
	"src/opcodes.h":({"1.2",}),
	"src/operators.c":({"1.3",}),
	"src/operators.h":({"1.2",}),
	"src/otable.h":({"1.2",}),
	"src/port.c":({"1.3","1.7","1.8","1.9",}),
	"src/port.h":({"1.3","1.4",}),
	"src/program.c":({"1.2","1.3","1.4","1.5",}),
	"src/program.h":({"1.2",}),
	"src/rusage.c":({"1.2","1.3",}),
	"src/rusage.h":({"1.2",}),
	"src/stralloc.c":({"1.2","1.3","1.4",}),
	"src/stralloc.h":({"1.2","1.3",}),
	"src/stuff.c":({"1.2",}),
	"src/stuff.h":({"1.2",}),
	"src/svalue.c":({"1.2","1.3","1.4",}),
	"src/svalue.h":({"1.2","1.3",}),
	"src/todo":({"1.2",}),
	"src/types.h":({"1.5","1.6",}),
	"src/ualarm.c":({"1.2",}),
      ])[path];

      if (revs) {
	foreach(revs, string rev) {
	  if (rcs_file->revisions[rev]) {
	    rcs_file->revisions[rev]->actual_author = "hubbe";
	  }
	}
      }
    }   
  }
  switch(path) {
    // ulpc.hubbe:
  case "doc/lpc/class":
    if (rcs_file->revisions["1.1"] &&
	(rcs_file->revisions["1.1"]->log == "New file\n")) {
      // This was the last commit before 1.0E-13 was released.
      rcs_file->tags["v1_0E-13"] = "1.1"; // Release tag.
    }
    break;

  case "doc/lpc/hilfe.hilfe":
    if (rcs_file->revisions["1.1.1.1"] &&
	(rcs_file->revisions["1.1.1.1"]->log == "uLPC\n") &&
	!rcs_file->revisions["1.2"]) {
      // The file is in the attic, but isn't properly dead...
      append_revision(rcs_file, UNDEFINED, UNDEFINED,
		      "95.11.05.23.25.02", "hubbe",
		      "moved fromhilfe.hilfe\n", "dead");
      // These two tags were probably added due
      // to the file not being properly dead.
      m_delete(rcs_file->tags, "E_9");
      m_delete(rcs_file->tags, "v1_0E_9");
    }
    break;

  case "lib/simulate.lpc":
    if (rcs_file->revisions["1.5"] &&
	rcs_file->revisions["1.5"]->time->unix_time() < 814929304) {
      // We're in the oldest of the ulpc repositories.
      // Let's add some release tags for the merged releases.
      rcs_file->tags["v1.0E-14"] = "1.5";
      rcs_file->tags["v1.1E-16"] = "1.4";
      rcs_file->tags["v1.1E-20"] = "1.2";
      rcs_file->tags["v1.0E-30"] = "1.1.1.1";
    } else if (rcs_file->revisions["1.22"]) {
      // We're in Hubbe's ulpc repository.
      // Add a release tag for the initial revision.
      rcs_file->tags["v1.3E-14"] = "1.1.1.1";
    } else {
      // We're probably in the Roxen branch of 1.0E-13.
      // Identify the merges with code from Hubbe's trunk?
    }
    break;

  case "src/ChangeLog":
    if (rcs_file->revisions["1.10"] &&
	rcs_file->revisions["1.10"]->time->unix_time() == 816430315) {
      // We're in the ulpc.hubbe repository.
      // Let's add some missing release tags for the releases that
      // were merged by the spider branch.
      rcs_file->tags["v1.5E-12"] = "1.10";
    }
    break;

    // Pike 0.5:
  case "lib/modules/MIME.pmod":
    if (rcs_file->revisions["1.7"]) {
      rcs_file->revisions["1.7"]->state = "Exp";
      rcs_file->revisions["1.7"]->path = "src/modules/MIME/module.pmod.in";
      // 1 second before the first commit on the new path.
      append_revision(rcs_file, UNDEFINED, UNDEFINED,
		      "97.05.19.09.52.31", "hubbe",
		      "new file\n", "dead");
    }
    break;

    // Pike 0.6:
  case "bin/mkwmml.pike":
    // This was renamed in conjunction with the commit of
    // src/modules/Image/mkwmml.pike:1.9, but there's no
    // corresponding commit of "bin/mkwmml.pike".
    rename_revision(rcs_file, "src/modules/Image/mkwmml.pike", "bin/mkwmml.pike",
		    append_revision(rcs_file, UNDEFINED, "1.8",
				    "98.05.21.11.53.38",
				    "grubba", "Moved to pike/bin/.\n"));
    break;
  case "src/modules/Pipe/pipe.c":
    // It seems Hubbe (and one of the Roxen 1.2 builders?) had
    // a sticky revision 1.11 on this file for a while.
    foreach(({"v0_6_66", "v0_6_68", "v0_6_70", "v0_6_72", "gothia_19971027",
	      "roxen_1_2a14", "roxen_1_2a15", "roxen_1_2beta1pre1",
	      "roxen_1_2b1_nda", "roxen_1_2b1_2", "roxen_1_2b1_3", }),
	    string t) {
      if (rcs_file->tags[t] == "1.11") {
	m_delete(rcs_file->tags, t);
      }
    }
    break;
  case "lib/modules/Remote.pmod/Client.pike":
  case "lib/modules/Remote.pmod/Server.pike":
  case "lib/modules/Remote.pmod/call.pike":
  case "lib/modules/Remote.pmod/connection.pike":
  case "lib/modules/Remote.pmod/context.pike":
  case "lib/modules/Remote.pmod/obj.pike":
  case "lib/modules/Remote.pmod/remote.h":
    {
      // This module was developed as a custom module in
      // the Luke project before being added to 0.6.
      string merge_rev =
	append_revision(rcs_file, UNDEFINED, UNDEFINED,
		      "98.10.20.21.15.15", "zino",
			"Added Remote.pmod\n");
      rename_revision(rcs_file,
		      path[sizeof("lib/modules/Remote.pmod/")..],
		      path, merge_rev);
      // Make the ancestor relation a soft reference.
      // (We don't want to have any implicit merges before this point).
      rcs_file->revisions[merge_rev]->revision_flags |= GIT_REVISION_MERGE;
      string prev_rev = rcs_file->revisions[merge_rev]->ancestor;
      // Set a name on the merged branch.
      add_branch(rcs_file, "pike-modules/Remote.pmod", prev_rev);
      // Move all tags from the last revision before the merge
      // to the merge revision.
      foreach(rcs_file->tags; string tag; string rev) {
	if (rev == prev_rev) {
	  rcs_file->tags[tag] = merge_rev;
	}
      }
      kill_branch(rcs_file, "hubbes_image_polygon");
      kill_branch(rcs_file, "Image_polygon");
      kill_branch(rcs_file, "locked_for_mirar");
      kill_branch(rcs_file, "heddas_polypatchar");
      kill_branch(rcs_file, "nisses-certifikat-hack");
    }
    break;

  // Pike 7.0:
  case "src/post_modules/GL/.cvsignore":
  case "src/post_modules/GL/Makefile.in":
  case "src/post_modules/GL/acconfig.h":
  case "src/post_modules/GL/auto.c.in":
  case "src/post_modules/GL/configure.in":
  case "src/post_modules/GL/constants.pike":
  case "src/post_modules/GL/features.pike":
  case "src/post_modules/GL/gen.pike":
  case "src/post_modules/GL/top.c":
    {
      // This module was developed in the external repository
      // pike-modules/GL before the post_modules support was
      // added in 0.7.
      string merge_rev =
	append_revision(rcs_file, UNDEFINED, UNDEFINED,
			"99.11.07.01.43.31", "per",
			"Initial version in the new pike post_module system\n");
      rename_revision(rcs_file, path[sizeof("src/post_modules/GL/")..],
		      path, merge_rev);
      // Make the ancestor relation a soft reference.
      // (We don't want to have any implicit merges before this point).
      rcs_file->revisions[merge_rev]->revision_flags |= GIT_REVISION_MERGE;
      string prev_rev = rcs_file->revisions[merge_rev]->ancestor;
      // Set a name on the merged branch.
      add_branch(rcs_file, "pike-modules/GL", prev_rev);
      // Move all tags from the last revision before the merge
      // to the merge revision.
      foreach(rcs_file->tags; string tag; string rev) {
	if (rev == prev_rev) {
	  rcs_file->tags[tag] = merge_rev;
	}
      }
      kill_branch(rcs_file, "hubbes_image_polygon");
    }
    break;
  case "lib/modules/Protocols.pmod/IMAP.pmod/dummy_server.pike":
  case "lib/modules/Protocols.pmod/IMAP.pmod/imap_server.pike":
  case "lib/modules/Protocols.pmod/IMAP.pmod/parse_line.pike":
  case "lib/modules/Protocols.pmod/IMAP.pmod/parser.pike":
  case "lib/modules/Protocols.pmod/IMAP.pmod/requests.pmod":
  case "lib/modules/Protocols.pmod/IMAP.pmod/server.pike":
  case "lib/modules/Protocols.pmod/IMAP.pmod/types.pmod":
    {
      // This module was developed as a custom module in
      // the AutoSite project before being added to 0.7.
      string merge_rev =
	append_revision(rcs_file, UNDEFINED, UNDEFINED,
			"99.08.12.00.44.16", "marcus",
			"Fixes to work with 0.7.\n");
      rename_revision(rcs_file,
		      path[sizeof("lib/modules/Protocols.pmod/IMAP.pmod/")..],
		      path, merge_rev);
      // Make the ancestor relation a soft reference.
      // (We don't want to have any implicit merges before this point).
      rcs_file->revisions[merge_rev]->revision_flags |= GIT_REVISION_MERGE;
      string prev_rev = rcs_file->revisions[merge_rev]->ancestor;
    // Set a name on the merged branch.
      add_branch(rcs_file, "pike-modules/IMAP.pmod", prev_rev);
      // Move all tags from the last revision before the merge
      // to the merge revision.
      foreach(rcs_file->tags; string tag; string rev) {
	if (rev == prev_rev) {
	  rcs_file->tags[tag] = merge_rev;
	}
      }
      kill_branch(rcs_file, "hubbes_image_polygon");
    }
    break;
  case "lib/modules/Protocols.pmod/LDAP.pmod/client.pike":
  case "lib/modules/Protocols.pmod/LDAP.pmod/ldap_errors.h":
  case "lib/modules/Protocols.pmod/LDAP.pmod/ldap_globals.h":
  case "lib/modules/Protocols.pmod/LDAP.pmod/ldap_privates.pmod":
  case "lib/modules/Protocols.pmod/LDAP.pmod/protocol.pike":
    {
      // These files were first added to Pike 0.6, and then
      // later copied to Pike 0.7.
      if (git->master_branch == "0.6") {
	string prev_rev = find_revision(rcs_file, UNDEFINED,
					"99.08.12.00.44.16");
	if (prev_rev) {
	  // Add a tag for the split point.
	  rcs_file->tags["pre_ldap_split"] = prev_rev;
	}
	break;
      }
      string merge_rev = "1.2";
      if (!rcs_file->revisions[merge_rev] ||
	  rcs_file->revisions[merge_rev]->log != "Fixes to work with 0.7.\n") {
	merge_rev =
	  append_revision(rcs_file, UNDEFINED, UNDEFINED,
			  "99.08.12.00.44.16", "marcus",
			  "Fixes to work with 0.7.\n");
      }
      // Make the ancestor relation a soft reference.
      // (We don't want to have any implicit merges before this point).
      rcs_file->revisions[merge_rev]->revision_flags |= GIT_REVISION_MERGE;
      string prev_rev = rcs_file->revisions[merge_rev]->ancestor;
      // Move the earlier revisions to the 0.6 branch.
      add_branch(rcs_file, "0.6", prev_rev);
      // Move all tags belonging to 0.7 from the last revision
      // before the merge to the merge revision.
      foreach(rcs_file->tags; string tag; string rev) {
	if ((rev == prev_rev) && (tag != "release_990531") &&
	    !has_prefix(tag, "roxen_1_2") && !has_prefix(tag, "roxen_1_3") &&
	    !has_prefix(tag, "pike_v0_6") && !has_prefix(tag, "v0_6")) {
	  rcs_file->tags[tag] = merge_rev;
	}
      }
      // And add a tag for the split point.
      rcs_file->tags["pre_ldap_split"] = prev_rev;
    }
    break;
  case "src/install-welcome":
    // Adjust the initial commit message from "new file\n",
    // so that it can be merged with the corresponding
    // bin/install.pike commit.
    rcs_file->revisions["1.1"]->log =
      "bugfix: GUI uses picture from source dir now\n";
    break;
  case "bin/mktreeopt.pike":
  case "src/treeopt.in":
    // v0.7.84 was created on a rather old repository,
    // where these files didn't exist yet.
    kill_tag(rcs_file, "v0_7_84");
    break;
  case "lib/modules/Stdio.pmod/module.pmod":
    // This file was renamed somewhere around bin/install.pike 1.7.
    rename_revision(rcs_file, "lib/modules/Stdio.pmod",
		    "lib/modules/Stdio.pmod/module.pmod",
		    append_revision(rcs_file, UNDEFINED, "1.37",
				    "99.03.11.22.31.05", "hubbe",
				    "now handles replacing files "
				    "with directories\n"));
    break;
  case "src/modules/_Crypto/arcfour.c":
    rename_revision(rcs_file, "src/modules/_Crypto/rc4.c",
		    "src/modules/_Crypto/arcfour.c", "1.10");
    if (rcs_file->tags["v7_5_20"]) {
      // Nilsson had the old files checked out when he tagged v7_5_20.
      rcs_file->tags["v7_5_20"] = rcs_file->head;
    }
    break;
  case "src/modules/_Crypto/lib/arcfour.c":
    rename_revision(rcs_file, "src/modules/_Crypto/lib/rc4.c",
		    "src/modules/_Crypto/lib/arcfour.c", "1.7");
    if (rcs_file->tags["v7_5_20"]) {
      // Nilsson had the old files checked out when he tagged v7_5_20.
      rcs_file->tags["v7_5_20"] = rcs_file->head;
    }
    break;
  case "src/modules/_Crypto/include/arcfour.h":
    rename_revision(rcs_file, "src/modules/_Crypto/include/rc4.h",
		    "src/modules/_Crypto/include/arcfour.h", "1.4");
    if (rcs_file->tags["v7_5_20"]) {
      // Nilsson had the old files checked out when he tagged v7_5_20.
      rcs_file->tags["v7_5_20"] = rcs_file->head;
    }
    break;
  // These are missing! They all died in the transition to 7.0.
  case "bin/fakes/chmod":
  case "bin/fakes/cp":
  case "bin/fakes/install":
  case "bin/fakes/mkdir":
  case "bin/fakes/mv":
  case "bin/fakes/rm":
    // These were probably killed with src/Makefile.in 1.144,
    // when they stopped being used.
    if (git->master_branch == "0.6") {
      string rev = append_revision(rcs_file, "7.0", UNDEFINED,
				   "99.06.10.01.12.08", "hubbe",
				   "'make bin_export' now works again, "
				   "and builds self-extracting tar\n"
				   "archives, packing yet to be added..\n",
				   "dead");

      // We also need to add the deletion to the nt-tools branch.
      add_branch(rcs_file, "nt-tools", rev);
    }
    break;

  case "about_pike/.cvsignore":
  case "about_pike/README":
  case "about_pike/about_versions":
  case "about_pike/client-server.pike":
  case "about_pike/crypto_stuff.pike":
  case "about_pike/draw_stuff.pike":
  case "about_pike/foo.ppm":
  case "about_pike/mail_stuff.pike":
  case "about_pike/matrix2.foo":
  case "about_pike/perl_tcl_python_pike":
  case "about_pike/why_pike_long":
  case "about_pike/why_pike_short":
  case "doc/README":
  case "doc/builtin/_memory_usage":
  case "doc/builtin/_next":
  case "doc/builtin/_prev":
  case "doc/builtin/_verify_internals":
  case "doc/builtin/add_constant":
  case "doc/builtin/aggregage_multiset":
  case "doc/builtin/aggregate":
  case "doc/builtin/aggregate_mapping":
  case "doc/builtin/alarm":
  case "doc/builtin/all_constants":
  case "doc/builtin/allocate":
  case "doc/builtin/arrayp":
  case "doc/builtin/backtrace":
  case "doc/builtin/call_function":
  case "doc/builtin/clone":
  case "doc/builtin/column":
  case "doc/builtin/combine_path":
  case "doc/builtin/compile_file":
  case "doc/builtin/compile_string":
  case "doc/builtin/copy_value":
  case "doc/builtin/crypt":
  case "doc/builtin/ctime":
  case "doc/builtin/destruct":
  case "doc/builtin/equal":
  case "doc/builtin/exit":
  case "doc/builtin/floatp":
  case "doc/builtin/function_name":
  case "doc/builtin/function_object":
  case "doc/builtin/functionp":
  case "doc/builtin/gc":
  case "doc/builtin/getpid":
  case "doc/builtin/glob":
  case "doc/builtin/hash":
  case "doc/builtin/indices":
  case "doc/builtin/intp":
  case "doc/builtin/kill":
  case "doc/builtin/load_module":
  case "doc/builtin/localtime":
  case "doc/builtin/lower_case":
  case "doc/builtin/m_delete":
  case "doc/builtin/mappingp":
  case "doc/builtin/mkmapping":
  case "doc/builtin/multisetp":
  case "doc/builtin/next_object":
  case "doc/builtin/object_program":
  case "doc/builtin/objectp":
  case "doc/builtin/programp":
  case "doc/builtin/query_host_name":
  case "doc/builtin/query_num_arg":
  case "doc/builtin/random":
  case "doc/builtin/random_seed":
  case "doc/builtin/replace":
  case "doc/builtin/reverse":
  case "doc/builtin/rows":
  case "doc/builtin/rusage":
  case "doc/builtin/search":
  case "doc/builtin/signal":
  case "doc/builtin/signame":
  case "doc/builtin/signum":
  case "doc/builtin/sizeof":
  case "doc/builtin/sleep":
  case "doc/builtin/sort":
  case "doc/builtin/stringp":
  case "doc/builtin/this_object":
  case "doc/builtin/this_thread":
  case "doc/builtin/thread_create":
  case "doc/builtin/throw":
  case "doc/builtin/time":
  case "doc/builtin/trace":
  case "doc/builtin/ualarm":
  case "doc/builtin/upper_case":
  case "doc/builtin/values":
  case "doc/builtin/zero_type":
  case "doc/index.bmml":
  case "doc/internal/.bmmlrc":
  case "doc/internal/array/aggregate_array":
  case "doc/internal/array/allocate_array":
  case "doc/internal/array/array":
  case "doc/internal/array/array_index":
  case "doc/internal/array/array_remove":
  case "doc/internal/array/array_search":
  case "doc/internal/array/array_set_index":
  case "doc/internal/array/copy_array":
  case "doc/internal/array/free_array":
  case "doc/internal/array/push_array_items":
  case "doc/internal/array/resize_array":
  case "doc/internal/array/slice_array":
  case "doc/internal/low_level/hashmem":
  case "doc/internal/low_level/init_memsearch":
  case "doc/internal/low_level/low_level":
  case "doc/internal/low_level/memory_search":
  case "doc/internal/low_level/reorder":
  case "doc/internal/low_level/set_close_on_exec":
  case "doc/internal/low_level/set_nonblocking":
  case "doc/internal/low_level/set_read_callback":
  case "doc/internal/low_level/set_write_callback":
  case "doc/internal/low_level/xalloc":
  case "doc/internal/mappings/copy_mapping":
  case "doc/internal/mappings/free_mapping":
  case "doc/internal/mappings/low_mapping_lookup":
  case "doc/internal/mappings/m_sizeof":
  case "doc/internal/mappings/map_delete":
  case "doc/internal/mappings/mapping":
  case "doc/internal/mappings/mapping_indices":
  case "doc/internal/mappings/mapping_insert":
  case "doc/internal/mappings/mapping_replace":
  case "doc/internal/mappings/mapping_values":
  case "doc/internal/mappings/mkmapping":
  case "doc/internal/object/object":
  case "doc/internal/pike/SETJMP":
  case "doc/internal/pike/SET_ONERROR":
  case "doc/internal/pike/UNSETJMP":
  case "doc/internal/pike/UNSET_ONERROR":
  case "doc/internal/pike/data_types":
  case "doc/internal/pike/error":
  case "doc/internal/pike/error_handling":
  case "doc/internal/pike/fatal":
  case "doc/internal/pike/frame":
  case "doc/internal/pike/throw":
  case "doc/internal/pike/type_field":
  case "doc/internal/pike/types":
  case "doc/internal/program/add_function":
  case "doc/internal/program/add_storage":
  case "doc/internal/program/end_c_program":
  case "doc/internal/program/program":
  case "doc/internal/program/set_exit_callback":
  case "doc/internal/program/set_init_callback":
  case "doc/internal/program/start_new_program":
  case "doc/internal/strings/add_shared_strings":
  case "doc/internal/strings/begin_shared_string":
  case "doc/internal/strings/binary_findstring":
  case "doc/internal/strings/end_shared_string":
  case "doc/internal/strings/findstring":
  case "doc/internal/strings/free_string":
  case "doc/internal/strings/make_shared_binary_string":
  case "doc/internal/strings/make_shared_string":
  case "doc/internal/strings/my_strcmp":
  case "doc/internal/strings/pike_string":
  case "doc/internal/strings/push_string":
  case "doc/internal/strings/string_replace":
  case "doc/internal/svalue/IS_ZERO":
  case "doc/internal/svalue/assign_svalue":
  case "doc/internal/svalue/free_svalue":
  case "doc/internal/svalue/is_eq":
  case "doc/internal/svalue/is_equal":
  case "doc/internal/svalue/is_lt":
  case "doc/internal/svalue/svalue":
  case "doc/manual/example1":
  case "doc/manual/example2":
  case "doc/manual/example3":
  case "doc/manual/tutorial":
  case "doc/operators/and":
  case "doc/operators/complement":
  case "doc/operators/divide":
  case "doc/operators/index":
  case "doc/operators/is_equal":
  case "doc/operators/is_greater_or_equal":
  case "doc/operators/is_greater_than":
  case "doc/operators/is_lesser_or_equal":
  case "doc/operators/is_lesser_than":
  case "doc/operators/logical_and":
  case "doc/operators/logical_or":
  case "doc/operators/minus":
  case "doc/operators/modulo":
  case "doc/operators/mult":
  case "doc/operators/not":
  case "doc/operators/not_equal":
  case "doc/operators/operators":
  case "doc/operators/or":
  case "doc/operators/plus":
  case "doc/operators/range":
  case "doc/operators/shift_left":
  case "doc/operators/shift_right":
  case "doc/operators/xor":
  case "doc/pike/all.bmml":
  case "doc/pike/cast":
  case "doc/pike/catch":
  case "doc/pike/class":
  case "doc/pike/command_line_options":
  case "doc/pike/control_structures/break":
  case "doc/pike/control_structures/catch":
  case "doc/pike/control_structures/continue":
  case "doc/pike/control_structures/do-while":
  case "doc/pike/control_structures/for":
  case "doc/pike/control_structures/foreach":
  case "doc/pike/control_structures/if-else":
  case "doc/pike/control_structures/return":
  case "doc/pike/control_structures/switch":
  case "doc/pike/control_structures/while":
  case "doc/pike/efuns.bmml":
  case "doc/pike/functions":
  case "doc/pike/gauge":
  case "doc/pike/hilfe":
  case "doc/pike/how_to_make_modules":
  case "doc/pike/inherit":
  case "doc/pike/lambda":
  case "doc/pike/modifier":
  case "doc/pike/preprocessor":
  case "doc/pike/reserved.bmml":
  case "doc/pike/sscanf":
  case "doc/pike/typeof":
  case "doc/pike/variables":
  case "doc/precompiled/FILE":
  case "doc/precompiled/condition":
  case "doc/precompiled/mutex":
  case "doc/precompiled/fifo":
  case "doc/precompiled/queue":
  case "doc/precompiled/sql":
  case "doc/precompiled/sql_result":
  case "doc/precompiled/stack":
  case "doc/precompiled/string_buffer":
  case "doc/simulated/PI":
  case "doc/simulated/add_efun":
  case "doc/simulated/aggregage_list":
  case "doc/simulated/all_efuns":
  case "doc/simulated/capitalize":
  case "doc/simulated/describe_backtrace":
  case "doc/simulated/exec":
  case "doc/simulated/explode":
  case "doc/simulated/file_size":
  case "doc/simulated/filter":
  case "doc/simulated/filter_array":
  case "doc/simulated/find_option":
  case "doc/simulated/get_args":
  case "doc/simulated/get_function":
  case "doc/simulated/getenv":
  case "doc/simulated/implode":
  case "doc/simulated/implode_nicely":
  case "doc/simulated/l_sizeof":
  case "doc/simulated/listp":
  case "doc/simulated/m_indices":
  case "doc/simulated/m_sizeof":
  case "doc/simulated/m_values":
  case "doc/simulated/map":
  case "doc/simulated/map_array":
  case "doc/simulated/master":
  case "doc/simulated/member_array":
  case "doc/simulated/mklist":
  case "doc/simulated/mkmultiset":
  case "doc/simulated/perror":
  case "doc/simulated/popen":
  case "doc/simulated/previous_object":
  case "doc/simulated/putenv":
  case "doc/simulated/read_bytes":
  case "doc/simulated/read_file":
  case "doc/simulated/regexp":
  case "doc/simulated/search_array":
  case "doc/simulated/sort_array":
  case "doc/simulated/spawn":
  case "doc/simulated/stderr":
  case "doc/simulated/stdin":
  case "doc/simulated/stdout":
  case "doc/simulated/strlen":
  case "doc/simulated/strmult":
  case "doc/simulated/strstr":
  case "doc/simulated/sum":
  case "doc/simulated/sum_arrays":
  case "doc/simulated/system":
  case "doc/simulated/this_function":
  case "doc/simulated/uniq":
  case "doc/simulated/version":
  case "doc/simulated/write":
  case "doc/simulated/write_file":
  case "doc/types/array":
  case "doc/types/float":
  case "doc/types/function":
  case "doc/types/int":
  case "doc/types/mapping":
  case "doc/types/mixed":
  case "doc/types/multiset":
  case "doc/types/object":
  case "doc/types/program":
  case "doc/types/string":
    {
      // NB: The brace above is to speed up cc-mode...

      // These files are known to be missing at the time of Pike 7.0.36.
      // We guess that they were deleted when the 0.7 branch was created.
      // Note that the first commit on the 0.7 branch was a few days later,
      // so we create an artificial commit at a time close to when we
      // believe the split was actually performed.
      if (git->master_branch == "0.6") {
	string rev = append_revision(rcs_file, "7.0", UNDEFINED,
				     "99.01.01.00.00.00", "hubbe",
				     "Pike 0.7\n", "dead");
	// We also need to add the deletion to the nt-tools branch.
	add_branch(rcs_file, "nt-tools", rev);
      }
    }
    break;

  // Note: This module was renamed to _math in Pike 7.0 when the Math module
  // was added. There was no corresponding commit in the files themselves,
  // so it must be introduced.
  case "src/modules/_math/.cvsignore":
  case "src/modules/_math/configure":
  case "src/modules/_math/configure.in":
  case "src/modules/_math/math.c":
  case "src/modules/_math/testsuite.in":
  case "src/modules/_math/Makefile.in":
  case "src/modules/_math/Makefile.src":
  case "src/modules/_math/doc/acos":
  case "src/modules/_math/doc/asin":
  case "src/modules/_math/doc/atan":
  case "src/modules/_math/doc/ceil":
  case "src/modules/_math/doc/cos":
  case "src/modules/_math/doc/exp":
  case "src/modules/_math/doc/floor":
  case "src/modules/_math/doc/log":
  case "src/modules/_math/doc/pow":
  case "src/modules/_math/doc/sin":
  case "src/modules/_math/doc/sqrt":
  case "src/modules/_math/doc/tan":
    // The files were renamed when the Math module was added.
    rename_revision(rcs_file,
		    "src/modules/math/" + path[sizeof("src/modules/_math/")..],
		    path,
		    append_revision(rcs_file, UNDEFINED, UNDEFINED,
				    "99.03.31.13.12.37", "mirar",
				    "initial checkin of Math classes library\n"));
    break;
  case "src/modules/Image/phase.c":
  case "src/modules/Image/match.c":
    if (rcs_file->revisions["1.2"]) {
      // The files were killed before the renames.
      rcs_file->revisions["1.2"]->state = "Exp";
      rcs_file->revisions["1.2"]->path = path[..<1] + "h";
      if (git->master_branch == "7.4") {
	// Make sure the revision stays on the trunk.
	add_branch(rcs_file, "7_6", "1.2");
	add_branch(rcs_file, "7_8", "1.2");
      }
    }
    break;

    // Pike 7.2:
  case "lib/modules/Sql.pmod/Sql.pike":
    // Note: The renamed file was replaced with another file afterwards!
    rename_revision(rcs_file, "lib/modules/Sql.pmod/sql.pike",
		    "lib/modules/Sql.pmod/Sql.pike", "1.46");
    break;
    // These are missing from Pike 7.2.
  case "src/test/test_pike.pike":
    // This one was actually killed properly.
    if (rcs_file->revisions["1.2"] &&
	(rcs_file->revisions["1.2"]->log ==
	 "\x84testsuite generation changed\n")) {
      // Fix obscure error in the log message.
      rcs_file->revisions["1.2"]->log = "testsuite generation changed\n";
    }
    break;
    // These got obsolete when the testsuite generation moved to bin/.
    // But died first when Pike 7.2 was split off.
  case "src/test/.cvsignore":
  case "src/test/create_testsuite":
    if (git->master_branch == "7.0") {
      // Some time after the 7.2 split (2000.04.11.18.33.47).
      // Select the actual split point: ANNOUNCE 1.6.
      add_branch(rcs_file, "nt-tools",
		 append_revision(rcs_file, "7.2", UNDEFINED,
				 "2000.04.11.18.33.47", "hubbe",
				 "now 7.1\n", "dead"));
    }
    break;

    // lib/modules/Calendar.pmod ==> lib/modules/Calendar_I.pmod
  case "lib/modules/Calendar_I.pmod/module.pmod":
  case "lib/modules/Calendar_I.pmod/Austrian.pmod":
  case "lib/modules/Calendar_I.pmod/Gregorian.pmod":
  case "lib/modules/Calendar_I.pmod/ISO.pmod":
  case "lib/modules/Calendar_I.pmod/Julian.pmod":
  case "lib/modules/Calendar_I.pmod/Orthodox.pmod":
  case "lib/modules/Calendar_I.pmod/Stardate.pmod":
  case "lib/modules/Calendar_I.pmod/Swedish.pmod":
  case "lib/modules/Calendar_I.pmod/namnsdagar":
    rename_revision(rcs_file,
		    "lib/modules/Calendar.pmod/" +
		    path[sizeof("lib/modules/Calendar_I.pmod/")..],
		    path,
		    append_revision(rcs_file, UNDEFINED, UNDEFINED,
				    "2000.07.12.19.36.16", "mirar",
				    "first pike tree checkin\n"));
    break;

    // nt-tools:
  case ".cvsignore":
    if (git->master_branch != "nt-tools") break;
  case "init_nt":
  case "tools/ar":
  case "tools/bash-fixup":
  case "tools/chmod":
  case "tools/cp":
  case "tools/grep":
  case "tools/install":
  case "tools/install-sh":
  case "tools/lib":
  case "tools/lib.pike":
  case "tools/mkdir":
  case "tools/mv":
  case "tools/nasm":
  case "tools/nm":
  case "tools/pntld":
  case "tools/ranlib":
  case "tools/rntany":
  case "tools/rntcc":
  case "tools/rntcl":
  case "tools/rntecl":
  case "tools/sprsh":
  case "tools/sprsh-load-balancer":
  case "tools/sprshd":
  case "tools/uname":
  case "tools/wc":
    {
      // Somewhere between 7.1.39(2001.01.16.10.43.59) and
      //                   7.1.40(2001.01.16.13.14.53).

      // When moved to the new repository, one level of directories was removed.
      rename_revision(rcs_file, "NT/" + path, path,
		      append_revision(rcs_file, UNDEFINED, UNDEFINED,
				      "2001.01.16.12.00.00", "hubbe",
				      "The NT-tools are now in a separate repository.\n"));
      // Before this point, the files were part of Pike 7.2 (7.1).
      append_revision(rcs_file, "7.2", UNDEFINED, "2001.01.16.12.00.00",
		      "hubbe", "The NT-tools are now in a separate repository.\n",
		      "dead");
    }
    break;

    // Pike 7.4:

    // The README{,-CVS}{,.txt} files are a mess, but we try to make
    // a best effort at identifying when they were renamed and copied.
  case "README":
    if ((float)git->master_branch < 7.3) break;
    //   It was renamed back to README at revision 1.17.
    //   Unfortunately, the revisions 1.17 and 1.20 don't match
    //   the corresponding files in Pike 7.6...
    rename_revision(rcs_file, "README.txt", "README",
		    append_revision(rcs_file, UNDEFINED, UNDEFINED,
				    "2002.12.05.17.31.21", "nilsson",
				    "Removed .txt\n"));
    // FALL_THROUGH
  case "README.txt":
    if ((float)git->master_branch < 7.3) break;
    // README was probably renamed to README.txt when README-CVS.txt was created.
    rename_revision(rcs_file, "README", "README.txt",
		    append_revision(rcs_file, UNDEFINED, UNDEFINED,
				    "2002.03.17.23.01.03", "nilsson",
				    "Suggestion from Leif Stenssion that I "
				    "almost forgot about.\n"));
    break;

  case "README-CVS":
    // README-CVS.txt was renamed README-CVS at revision 1.20
    // of README-CVS.txt. Unfortunately there's no corresponding
    // commit in README-CVS...
    rename_revision(rcs_file, "README-CVS.txt", "README-CVS",
		    append_revision(rcs_file, UNDEFINED, UNDEFINED,
				    "2002.12.05.17.31.21", "nilsson",
				    "Removed .txt\n"));
    // FALLTHROUGH
  case "README-CVS.txt":
    // README-CVS.txt started out as a copy of README.txt sometime
    // during revision 1.12. We guess that it was slightly before
    // revision 1.13. This seems to correlate with COPYRIGHT 1.3.
    copy_revision(rcs_file, "README", "README-CVS.txt",
		  append_revision(rcs_file, UNDEFINED, UNDEFINED,
				  "2002.03.17.23.01.03", "nilsson",
				  "Suggestion from Leif Stenssion that I "
				  "almost forgot about.\n"));
    // We know that README-CVS.txt had this name at revision 1.13.
    // It is likely that the README ==> README.txt rename were performed
    // at the same time as the file was copied.
    break;

  case "lib/modules/SSL.pmod/sslfile.pike":
  case "lib/modules/SSL.pmod/VERSION":
    if (git->master_branch != "7.2") {
      // These two tags were added before the SSL module
      // moved from a separate repository to the Pike
      // repository, but after the Pike 7.2 // 7.4 split.
      m_delete(rcs_file->tags, "v7_2_27");
      m_delete(rcs_file->tags, "v7_2_30");
    }
    break;

  case "lib/modules/SSL.pmod/handshake.pike":
    if (git->master_branch != "0.6") {
      m_delete(rcs_file->tags, "nisses-certifikat-hack");
      hide_revision(rcs_file, "1.8.2.3");
      hide_revision(rcs_file, "1.8.2.2");
      hide_revision(rcs_file, "1.8.2.1");
    }
    break;

  case "lib/modules/Parser.pmod/LR.pmod/GrammarParser.pmod":
    copy_revision(rcs_file,
		  "lib/modules/Parser.pmod/LR.pmod/Grammar_parser.pmod",
		  "lib/modules/Parser.pmod/LR.pmod/GrammarParser.pmod", "1.4");
    break;

    // These files were copied an hour or two before the originals
    // were deleted.
  case "lib/modules/Tools.pmod/AutoDoc.pmod/MirarDocParser.pike":
    copy_revision(rcs_file, "refdoc/bin/mirardoc.pike", path, "1.11");
    break;
  case "lib/modules/Tools.pmod/Standalone.pmod/assemble_autodoc.pike":
    copy_revision(rcs_file, "refdoc/bin/assembler.pike", path, "1.18");
    break;
  case "lib/modules/Tools.pmod/Standalone.pmod/join_autodoc.pike":
    copy_revision(rcs_file, "refdoc/bin/join.pike", path, "1.9");
    break;
  case "lib/modules/Tools.pmod/Standalone.pmod/extract_autodoc.pike":
    copy_revision(rcs_file, "refdoc/bin/extract.pike", path, "1.19");
    break;

  case "lib/modules/_String.pmod":
    // This is a bit obscure; it seems String.pmod was renamed _String.pmod
    // before being deleted when String.pmod/module.pmod was created.
    // We adjust the commit message since the commit messages don't match.
    // String.pmod has "Changed into directory", which seems appropriate.
    rename_revision(rcs_file, "lib/modules/String.pmod",
		    "lib/modules/_String.pmod", "1.31");
    rcs_file->revisions["1.31"]->log = "Changed into directory\n";
    break;

    // These MUST NOT have \r\n after
    // src/modules/_Crypto/rijndaeltest.pike 1.6.
  case "src/modules/_Crypto/rijndael_ecb_tbl.txt":
    if (rcs_file->revisions["1.3"]) {
      rcs_file->revisions["1.3"]->revision_flags = GIT_EXPAND_KEYWORDS;
    }
    // FALL_THROUGH
  case "src/modules/_Crypto/rijndael_cbc_d_m.txt":
  case "src/modules/_Crypto/rijndael_cbc_e_m.txt":
  case "src/modules/_Crypto/rijndael_ecb_d_m.txt":
  case "src/modules/_Crypto/rijndael_ecb_e_m.txt":
  case "src/modules/_Crypto/rijndael_ecb_iv.txt":
  case "src/modules/_Crypto/rijndael_ecb_vk.txt":
  case "src/modules/_Crypto/rijndael_ecb_vt.txt":
    if (git->master_branch >= "7.4") {
      string rev = append_revision(rcs_file, UNDEFINED, UNDEFINED,
				   "2002.01.02.21.41.13", "nilsson",
				   "No \\r in the testdata anymore.\n");
      rcs_file->revisions[rev]->revision_flags = GIT_EXPAND_KEYWORDS;
    }
    if (rcs_file->tags["v7_5_20"]) {
      // Nilsson had the old files checked out when he tagged v7_5_20.
      rcs_file->tags["v7_5_20"] = rcs_file->head;
    }
    break;

  case "src/modules/_Image_PNG/.cvsignore":
    // Mirar forgot to kill this file when the other files
    // in src/modules/_Image_PNG/ were killed.
    append_revision(rcs_file, UNDEFINED, UNDEFINED,
		    "98.04.01.05.41.46", "mirar",
		    "not needed anymore\n", "dead");
    break;

  // These are missing from Pike 7.4!
  // They all died together with src/backend.c 1.64.
  case "src/modules/call_out/test_co.pike":
  case "src/modules/call_out/testsuite.in":
  case "src/modules/call_out/acconfig.h":
  case "src/modules/call_out/Makefile.in":
  case "src/modules/call_out/doc/remove_call_out":
  case "src/modules/call_out/doc/call_out":
  case "src/modules/call_out/doc/_do_call_outs":
  case "src/modules/call_out/doc/find_call_out":
  case "src/modules/call_out/doc/call_out_info":
  case "src/modules/call_out/.cvsignore":
  case "src/modules/call_out/configure.in":
  case "src/modules/call_out/call_out.c":
    if (git->master_branch == "7.2") {
      append_revision(rcs_file, "7.4", UNDEFINED, "2001.03.12.10.51.28", "hubbe",
		      "encapuslated backend in an object\n", "dead");
    }
    break;
  case "src/test_co.pike":
    rename_revision(rcs_file, "src/modules/call_out/test_co.pike",
		    "src/test_co.pike",
		    append_revision(rcs_file, UNDEFINED, UNDEFINED,
				    "2001.03.12.10.51.28", "hubbe",
				    "encapuslated backend in an object\n"));
    break;

  case "src/modules/Perl/README.txt":
    if (!rcs_file->tags["v7_3_21"]) {
      // This file was 9 minutes old when this tag was created
      // and the file wasn't tagged.
      kill_tag(rcs_file, "v7_3_21");
    }
    break;

  case "src/modules/Image/polygon.c":
  case "src/modules/Image/polygon.h":
    if (rcs_file->revisions["1.1"]->state == "dead") {
      // The original history of these files is a bit complicated:
      //   * Mirar checks in a polygon.c on the main branch (1.1)
      //   * Hubbe does a check out.
      //   * Mirar deletes the original rcs file and commits a new
      //     polygon.c on a development branch (1.1-dead and 1.1.2.1).
      //   * Hubbe continues to have a polygon.c in his working area,
      //     since cvs gets confused.
      //   * Hubbe tags a few versions of pike including polygon.c 1.1.
      //   * Hubbe commits a minor change of the original polygon.c (1.2),
      //     but the rcs file stays in the attic.
      //   * Hubbe tags a few versions of pike including polygon.c 1.2.
      //
      // We do the simple solution, and just hide revision 1.2 and
      // remove any tags on it.
      if (rcs_file->revisions["1.2"]) {
#if 0
	rcs_file->append_revision("1.2", "1.1.2.1",
				  rcs_file->revisions["1.2"]->time,
				  "hubbe", rcs_file->revisions["1.2"]->message,
				  "1.1.2.2");
#endif /* 0 */
	hide_revision(rcs_file, "1.2");
	// Remove the tags on the broken commit.
	foreach(rcs_file->tags; string tag; string r) {
	  if (r == "1.2") m_delete(rcs_file->tags, tag);
	}
      }
    } else {
      // Remove extraneous tags due to confused cvs.
      foreach(rcs_file->tags; string tag; string r) {
	if ((tag != "Image_polygon") && (tag != "hubbes_image_polygon")) {
	  m_delete(rcs_file->tags, tag);
	}
      }
    }
    break;
  case "src/modules/Image/image.c":
    if (rcs_file->revisions["1.105.2.1"]) {
      // This file was branched after a revert.
      // Move the branchpoint one step (ie to before the revert).
      rcs_file->revisions["1.105.2.1"]->ancestor = "1.104";
    }
    break;

  case "tools/pike.el":
    // This file moved sometime between man/pike.1 1.13 and 1.14
    // (ie between 2001.03.11.15.52.29 and 2002.08.02.05.07.15).
    // We add a revision corresponding to man/pike.1 1.14,
    // since the commit message is relevant.
    rename_revision(rcs_file, "lib/tools/pike.el", "tools/pike.el",
		    append_revision(rcs_file, UNDEFINED, UNDEFINED,
				    "2002.08.02.05.07.15", "jhs",
				    "pike.el has moved.\n"));
    break;

  case "lib/modules/Protocols.pmod/___XMLRPC.pmod":
    // The repository file was renamed after death.
    rename_revision(rcs_file, "lib/modules/Protocols.pmod/XMLRPC.pmod",
		    "lib/modules/Protocols.pmod/___XMLRPC.pmod",
		    rcs_file->head);
    break;

  case "lib/modules/Protocols.pmod/XMLRPC.pmod/module.pmod":
    if (rcs_file->revisions["1.7"] &&
	rcs_file->revisions["1.7"]->state == "dead") {
      // Pike 7.4 and later.
      rcs_file->revisions["1.7"]->state = "Exp";
      rename_revision(rcs_file, "lib/modules/Protocols.pmod/XMLRPC.pmod",
		      "lib/modules/Protocols.pmod/XMLRPC.pmod/module.pmod",
		      "1.7");
    } else {
      // Pike 7.2.
      copy_revision(rcs_file, "lib/modules/Protocols.pmod/XMLRPC.pmod",
		    "lib/modules/Protocols.pmod/XMLRPC.pmod/module.pmod",
		    append_revision(rcs_file, UNDEFINED, UNDEFINED,
				    "2001.05.30.14.22.50", "noring",
				    "Moving XMLRPC.pmod to "
				    "XMLRPC.pmod/module.pmod.\n"));
    }
    break;

  case "lib/modules/Tools.pmod/standalone.pmod/rsqld.pike":
    rename_revision(rcs_file, "bin/rsqld.pike",
		    "lib/modules/Tools.pmod/standalone.pmod/rsqld.pike", "1.3");
    break;

  case "src/modules/Odbc/odbc.c":
  case "src/modules/Odbc/odbc_result.c":
  case "src/modules/Odbc/precompiled_odbc.h":
    // The commit message on 2006-02-03 18:40:53
    // has 58 spaces instead of a linefeed.
    foreach(({ "1.19", "1.20", "1.36", "1.37", "1.39", "1.40" }), string rev) {
      RCSFile.Revision r = rcs_file->revisions[rev];
      if (!r) continue;
      r->log = replace(r->log,
		       "          "
		       "          "
		       "          "
		       "          "
		       "          "
		       "        ", "\n");
    }
    break;

  // Pike 7.6:
  case "bundles/patches/nettle-1.13/Makefile.in":
  case "bundles/patches/nettle-1.13/config.make.in":
  case "bundles/patches/nettle-1.13/configure":
  case "bundles/patches/nettle-1.13/configure.ac":
  case "bundles/patches/nettle-1.13/examples/Makefile.in":
  case "bundles/patches/nettle-1.13/sparc64/aes.asm":
  case "bundles/patches/nettle-1.13/sparc64/machine.m4":
  case "bundles/patches/nettle-1.13/testsuite/Makefile.in":
  case "bundles/patches/nettle-1.13/tools/Makefile.in":
    // These were copied from the corresponding nettle-1.12 files.
    string rev = ([
      "Makefile.in":"1.5",
      "config.make.in":"1.2",
      "configure":"1.3",
      "configure.ac":"1.3",
      "examples/Makefile.in":"1.2",
      "testsuite/Makefile.in":"1.2",
      "tools/Makefile.in":"1.2",
    ])[path[sizeof("bundles/patches/nettle-1.13/")..]];
    if (!rev) {
      rev = append_revision(rcs_file, UNDEFINED, UNDEFINED,
			    "2005.10.12.20.15.07", "grubba",
			    "Patches updated to Nettle 1.13.\n");
    }
    copy_revision(rcs_file, "bundles/patches/nettle-1.12/" +
		  path[sizeof("bundles/patches/nettle-1.13/")..],
		  path, rev);
    if (rcs_file->revisions[rev]->state == "dead") {
      // No need to show files that never existed...
      hide_revision(rcs_file, rev);
    }
    break;
  case "src/sscanf.c":
    // opcodes.c was copied to create sscanf.c.
    copy_revision(rcs_file, "src/opcodes.c", "src/sscanf.c", "1.155");
    break;
  case "lib/modules/Pike.pmod/module.pmod":
    rename_revision(rcs_file, "lib/modules/Pike.pmod",
		    "lib/modules/Pike.pmod/module.pmod", "1.9");
    break;
  case "lib/modules/Protocols.pmod/SMTP.pmod/module.pmod":
    // The actual move was probably done by nilsson the day before,
    // but this should be good enough.
    rename_revision(rcs_file, "lib/modules/Protocols.pmod/SMTP.pmod",
		    "lib/modules/Protocols.pmod/SMTP.pmod/module.pmod", "1.29");
    break;
  case "lib/modules/Web.pmod/RDF.pike":
    rename_revision(rcs_file, "lib/modules/Standards.pmod/RDF.pike",
		    "lib/modules/Web.pmod/RDF.pike",
		    append_revision(rcs_file, UNDEFINED, UNDEFINED,
				    "2003.10.14.23.52.10", "nilsson",
				    "Moved RDF from Standards to Web\n"));
    break;
  case "src/pike_rusage.h":
    rename_revision(rcs_file, "src/rusage.h", "src/pike_rusage.h", "1.10");
    break;
  case "src/pike_security.h":
    copy_revision(rcs_file, "src/security.h", "src/pike_security.h", "1.19");
    break;
  case "lib/modules/Tools.pmod/Standalone.pmod/extract_locale.pike":
    rename_revision(rcs_file, "bin/extract.pike", path, "1.17");
    break;

  case "lib/modules/Tools.pmod/Standalone.pmod/rsqld.pike":
    rename_revision(rcs_file, "bin/rsqld.pike", path, "1.3");
    break;

  case "lib/7.4/modules/Tools.pmod/Standalone.pmod/extract_autodoc.pike":
    // It was copied from Pike 7.4 at revision 1.24,
    // but note that the files diverged at revision 1.22.
    copy_revision(rcs_file, "lib/modules/Tools.pmod/Standalone.pmod/"
		  "extract_autodoc.pike", path, "1.24");
    // We therefore hide revision 1.22 and 1.23 to avoid confusion.
    hide_revision(rcs_file, "1.23");
    hide_revision(rcs_file, "1.22");
    // Earlier this file was known as refdoc/bin/extract.pike.
    rename_revision(rcs_file, "refdoc/bin/extract.pike",
		    "lib/modules/Tools.pmod/Standalone.pmod/"
		    "extract_autodoc.pike", "1.19");
    // Due to the late copy, the file contains quite a few release tags
    // from Pike 7.4, which we don't want.
    foreach(rcs_file->tags; string tag;) {
      if (has_prefix(tag, "v7_4_")) {
	m_delete(rcs_file->tags, tag);
      }
    }
    m_delete(rcs_file->tags, "tmp_zino_win32ok");
    break;

  case "lib/modules/Crypto.pmod":
    if (git->master_branch == "7.4") {
      // This file was replaced with lib/modules/Crypto.pmod/module.pmod
      // in Pike 7.6.
      append_revision(rcs_file, "7.6", UNDEFINED,
		      "2003.03.19.17.46.30", "nilsson",
		      "From /Crypto\n", "dead");
    }
    break;

  case "lib/modules/Crypto.pmod/SHA.pmod":
  case "lib/modules/Crypto.pmod/aes.pike":
  case "lib/modules/Crypto.pmod/arcfour.pike":
  case "lib/modules/Crypto.pmod/cast.pike":
  case "lib/modules/Crypto.pmod/des.pike":
  case "lib/modules/Crypto.pmod/des3.pike":
  case "lib/modules/Crypto.pmod/des3_cbc.pike":
  case "lib/modules/Crypto.pmod/des_cbc.pike":
  case "lib/modules/Crypto.pmod/dsa.pike":
  case "lib/modules/Crypto.pmod/hmac.pike":
  case "lib/modules/Crypto.pmod/idea.pike":
  case "lib/modules/Crypto.pmod/idea_cbc.pike":
  case "lib/modules/Crypto.pmod/koremutake.pmod":
  case "lib/modules/Crypto.pmod/md2.pike":
  case "lib/modules/Crypto.pmod/md4.pike":
  case "lib/modules/Crypto.pmod/md5.pike":
  case "lib/modules/Crypto.pmod/rijndael.pike":
  case "lib/modules/Crypto.pmod/rsa.pike":
  case "lib/modules/Crypto.pmod/sha.pike":
  case "lib/modules/Crypto.pmod/substitution.pike":
  case "src/modules/_Crypto/.cvsignore":
  case "src/modules/_Crypto/CREDITS":
  case "src/modules/_Crypto/Makefile.in":
  case "src/modules/_Crypto/acconfig.h":
    //case "src/modules/_Crypto/arcfour.c":
  case "src/modules/_Crypto/cast.c":
  case "src/modules/_Crypto/cbc.c":
  case "src/modules/_Crypto/configure.in":
  case "src/modules/_Crypto/crypto.c":
  case "src/modules/_Crypto/crypto.h":
  case "src/modules/_Crypto/des.c":
  case "src/modules/_Crypto/idea.c":
  case "src/modules/_Crypto/include/RCSID.h":
    //case "src/modules/_Crypto/include/arcfour.h":
  case "src/modules/_Crypto/include/cast.h":
  case "src/modules/_Crypto/include/crypto_types.h":
  case "src/modules/_Crypto/include/des.h":
  case "src/modules/_Crypto/include/idea.h":
  case "src/modules/_Crypto/include/md2.h":
  case "src/modules/_Crypto/include/md4.h":
  case "src/modules/_Crypto/include/md5.h":
  case "src/modules/_Crypto/include/rijndael.h":
  case "src/modules/_Crypto/include/sha.h":
  case "src/modules/_Crypto/lib/.cvsignore":
  case "src/modules/_Crypto/lib/Makefile.in":
    //case "src/modules/_Crypto/lib/arcfour.c":
  case "src/modules/_Crypto/lib/cast.c":
  case "src/modules/_Crypto/lib/cast_sboxes.h":
  case "src/modules/_Crypto/lib/configure.in":
  case "src/modules/_Crypto/lib/crypt_md5.c":
  case "src/modules/_Crypto/lib/desCode.h":
  case "src/modules/_Crypto/lib/desKerb.c":
  case "src/modules/_Crypto/lib/desQuick.c":
  case "src/modules/_Crypto/lib/desTest.c":
  case "src/modules/_Crypto/lib/desUtil.c":
  case "src/modules/_Crypto/lib/descore.README":
  case "src/modules/_Crypto/lib/descore.shar.gz":
  case "src/modules/_Crypto/lib/desdata.c":
  case "src/modules/_Crypto/lib/desdata.pike":
  case "src/modules/_Crypto/lib/desinfo.h":
  case "src/modules/_Crypto/lib/idea.c":
  case "src/modules/_Crypto/lib/install-sh":
  case "src/modules/_Crypto/lib/md2.c":
  case "src/modules/_Crypto/lib/md4.c":
  case "src/modules/_Crypto/lib/md5.c":
  case "src/modules/_Crypto/lib/rijndael-boxes.dat":
  case "src/modules/_Crypto/lib/rijndael.README":
  case "src/modules/_Crypto/lib/rijndael.README.Pike":
  case "src/modules/_Crypto/lib/rijndael.c":
  case "src/modules/_Crypto/lib/sha.c":
  case "src/modules/_Crypto/md2.c":
  case "src/modules/_Crypto/md4.c":
  case "src/modules/_Crypto/md5.c":
  case "src/modules/_Crypto/nt.c":
  case "src/modules/_Crypto/pipe.c":
  case "src/modules/_Crypto/rijndael.c":
  case "src/modules/_Crypto/rijndaeltest.pike":
  case "src/modules/_Crypto/sha.c":
  case "src/modules/_Crypto/test_crypto.pike":
  case "src/modules/_Crypto/testsuite.in":
  case "src/modules/_Regexp_PCRE/.autodoc":
    if (rcs_file->tags["v7_5_20"]) {
      // Nilsson had the old files checked out when he tagged v7_5_20.
      rcs_file->tags["v7_5_20"] = rcs_file->head;
    }
    break;

    // These MUST NOT have \r\n (see above).
  case "src/post_modules/Nettle/rijndael_ecb_tbl.txt":
  case "src/post_modules/Nettle/rijndael_cbc_d_m.txt":
  case "src/post_modules/Nettle/rijndael_cbc_e_m.txt":
  case "src/post_modules/Nettle/rijndael_ecb_d_m.txt":
  case "src/post_modules/Nettle/rijndael_ecb_e_m.txt":
  case "src/post_modules/Nettle/rijndael_ecb_iv.txt":
  case "src/post_modules/Nettle/rijndael_ecb_vk.txt":
  case "src/post_modules/Nettle/rijndael_ecb_vt.txt":
    foreach(rcs_file->revisions;; RCSFile.Revision rev) {
      rev->revision_flags = GIT_EXPAND_KEYWORDS;
    }
    break;

    // CRLF fixup:
  case "src/post_modules/Nettle/byte-hashes.sha1":
  case "src/post_modules/Nettle/byte-messages.sha1":
    // These have CRLF line terminations, but sha1test.pike which uses them
    // strips all CR characters before processing, so either LF or CRLF
    // terminations should work equally well.
  case "src/post_modules/_Image_SVG/pike+fish.svg":
    // This file has CRLF line terminations, but all other svg files
    // have LF.
  case "src/UnicodeData-ReadMe.txt":
  case "src/UnicodeData.txt":
    // The earliest versions of the Unicode database used CRLF line
    // terminations, but everything since Unicode 3.1.0 was imported
    // using LF line terminations. 
  case "packaging/fink/README":
  case "packaging/fink/README.Panther":
  case "packaging/fink/nettle.info":
  case "packaging/fink/pike7.4.info":
  case "packaging/fink/pike7.5.info":
  case "packaging/fink/pike7.6.info":
    // The newest versions of these files in 7.6 use CRLF line
    // terminations, but I think that is an accident, as the
    // earlier versions did not, and neither do those which are
    // currently in 7.7.
  case "packaging/windows/Copying.txt":
  case "packaging/windows/finalizer.pike":
  case "packaging/windows/nilsson-pike.iss":
  case "packaging/windows/pike.iss":
    // These files were created on WIN32, but don't require CRLF.
    fix_crlf(rcs_file);
    break;

  // Pike 7.7:
  case "src/post_modules/COM/examples/ads.pike":
  case "src/post_modules/COM/examples/shelltest.pike":
  case "src/post_modules/COM/examples/word.pike":
  case "src/post_modules/COM/examples/word2.pike":
    // The above four all have CRLF line breaks, but ought to have
    // LF line breaks.
    fix_crlf(rcs_file);
    // FALL_THROUGH
  case "src/post_modules/COM/.cvsignore":
  case "src/post_modules/COM/Makefile.in":
  case "src/post_modules/COM/acconfig.h":
  case "src/post_modules/COM/com.c":
  case "src/post_modules/COM/config.h.in":
  case "src/post_modules/COM/configure.in":
  case "src/post_modules/COM/module.pmod.in.in":
  case "src/post_modules/COM/testsuite.in":
    // These were developed in a separate repository
    // before being added to Pike 7.4, 7.6 and 7.7(7.8).
    // due to this, they received a single release tag for
    // Pike 7.7 before the add (but after the Pike 7.4, 7.6
    // and 7.7 splits).
    // We remove the problematic tag from the 7.4 and 7.6 branches.
    if ((git->master_branch == "7.4") || (git->master_branch == "7.6")) {
      m_delete(rcs_file->tags, "v7_7_22");
    }
    break;

  // Pike 7.8:
  // These were merged into lib/modules/Locale.pmod/Charset.pmod/module.pmod.
  case "lib/modules/Locale.pmod/Charset.pmod":
    if (git->master_branch == "7.6") {
      // The Pike 7.6 version was replaced with the module.pmod.in in 7.8.
      append_revision(rcs_file, "7.8", UNDEFINED,
		      "2006.01.18.18.30.58", "grubba",
		      "Moved src/modules/_Charset/module.pmod.in here.\n",
		      "dead");
    } else if (git->master_branch == "7.8") {
      // Killed together with src/modules/_Charset/module.pmod.in 1.50.
      append_revision(rcs_file, UNDEFINED, UNDEFINED,
		      "2006.01.18.18.30.58", "grubba",
		      "Moved to lib/modules/Locale.pmod/"
		      "Charset.pmod/module.pmod.\n", "dead");
    }
    break;
  case "lib/modules/Locale.pmod/Charset.pmod/module.pmod":
    rename_revision(rcs_file, "src/modules/_Charset/module.pmod.in",
		    "lib/modules/Locale.pmod/Charset.pmod/module.pmod", "1.50");
    break;
  case "src/modules/Parser/xml.cmod":
    rename_revision(rcs_file, "src/modules/Parser/xml.c",
		    "src/modules/Parser/xml.cmod", "1.85");
    // FALLTHROUGH
  case "src/modules/Parser/xml.c":
    copy_revision(rcs_file, "src/modules/spider/xml.c",
		  "src/modules/Parser/xml.c", "1.78");
    // These two revisions are artifacts of the ,v-file
    // having been copied after the fact.
    hide_revision(rcs_file, "1.76");
    hide_revision(rcs_file, "1.77");
    break;
  // FIXME: These are missing!
  //   COMPILING-rntcl,v
  case "lib/modules/Tools.pmod/Standalone.pmod/test_pike.pike":
    copy_revision(rcs_file, "bin/test_pike.pike",
		  "lib/modules/Tools.pmod/Standalone.pmod/test_pike.pike",
		  append_revision(rcs_file, UNDEFINED, UNDEFINED,
				  "2005.10.17.20.31.08", "grubba",
				  "Now uses pike -x test_pike to run the testsuite.\n"));
    break;
  case "src/modules/JSON/Makefile.in":
  case "src/modules/JSON/dependencies":
  case "src/modules/JSON/json.cmod":
  case "src/modules/JSON/json.h":
  case "src/modules/JSON/json_parser.c":
  case "src/modules/JSON/testsuite.in":
    // These all contain revisions that were imported
    // to cvs via git, and contain some git-isms in
    // the log messages.
    // Attempt to clean up the messages.
    foreach(rcs_file->revisions;; RCSFile.Revision rev) {
      string message = rev->log;
      if (!message) continue;
      // Kill Author "header".
      sscanf(message, "Author: %*s>\n\n%s", message);
      string rest = "";
      sscanf(message, "%s\nAuthor: %*s>\n%s", message, rest);
      message += rest;
      // Kill extra indent.
      message = map(message/"\n", String.trim_all_whites) * "\n";
      // Kill extra whitespace at start and end.
      message = String.trim_all_whites(message) + "\n";
      rev->log = message;
    }
    break;
  }

  /* There are quite a few release tags in the SSL and LDAP modules
   * that belong to other main branches.
   *
   * Belonging to Pike 0.5:
   *   pike_v0_5_*
   *   roxen_1_2_*
   *   v0_5-*
   *   v0_5_*
   *
   * Belonging to Pike 0.6:
   *   hubbes_image_polygon
   *   merged-into-07-hubbe-981231
   *   msqlmod_1_1_1
   *   nisses-certifikat-hack
   *   pike_v0_6_*
   *   platform_best_try
   *   postgres_1_0_2
   *   postgres_1_0_2_mk2
   *   release_990531
   *   roxen_1_3_*
   *   v0_6-*
   *   v0_6_*
   *
   * Belonging to Pike 7.0:
   *   pike_v7_*
   *   roxen_1_4_*
   *   ssl3_7_0_*
   *   ssl3_2_0_*
   *   ssl3_1_4_*
   *
   * Belonging to Pike 7.2:
   *   ssl3_7_1_*
   *   v7_1_*
   */

  if (git->master_branch == "0.5") {
    if (has_prefix(path, "lib/modules/Yabu.pmod/")) {
      // These tags belong to Pike 0.6.
      m_delete(rcs_file->tags, "cadtorget_gammal");
      m_delete(rcs_file->tags, "merged-into-07-hubbe-981231");
      // Make sure we're not compatible with nisses-certifikat-hack.
      kill_branch(rcs_file, "nisses-certifikat-hack");
      kill_branch(rcs_file, "hubbes_image_polygon");
    }
    if (has_prefix(path, "src/modules/Postgres/")) {
      // These tags belong to Pike 0.6.
      m_delete(rcs_file->tags, "postgres_1_0_2");
      m_delete(rcs_file->tags, "postgres_1_0_2_mk2");
    }
    if (has_prefix(path, "src/modules/Msql/")) {
      // These tags belong to Pike 0.6.
      m_delete(rcs_file->tags, "msqlmod_1_1_1");
    }
  } else {
    // The roxen_1_2_xx tags are on both Pike 0.5 and Pike 0.6.
    // Roxen itself however called itself 1.2 when running on
    // Pike 0.5 and 1.3 when running of 0.6.
    foreach(rcs_file->tags; string tag; string rev) {
      if (has_prefix(tag, "roxen_1_2_") &&
	  !rcs_file->tags["roxen_1_3_" + tag[sizeof("roxen_1_2_")..]]) {
	rcs_file->tags["roxen_1_3_" + tag[sizeof("roxen_1_2_")..]] = rev;
	m_delete(rcs_file->tags, tag);
      }
    }
    // Clean up tags that belong to the 0.5 SSL3 and Yabu modules.
    if (has_prefix(path, "lib/modules/SSL.pmod/") ||
	has_prefix(path, "lib/modules/Yabu.pmod/")) {
      // The v0_5_*, pike_v0_5_* and v0_5-* tags
      // belong to the Pike 0.5 branch.
      foreach(rcs_file->tags; string t; string r) {
	if (has_prefix(t, "v0_5_") || has_prefix(t, "pike_v0_5_") ||
	    has_prefix(t, "v0_5-")) {
	  m_delete(rcs_file->tags, t);
	}
      }
    }
  }

  if (git->master_branch == "0.6") {
#if 0
    // Back-dating of Remote.pmod and Yabu.pmod.
    // They were originally developed in CVS modules, and merged in 0.6.
    if (has_prefix(path, "lib/modules/Remote.pmod/")) {
      // The times chosen here are the same as the ones used in the
      // corresponding calls of branch_dependancy() above, since it
      // doesn't have any release tags for Pike 0.5.
      add_branch(rcs_file, "0.5", find_revision(rcs_file, UNDEFINED,
						"97.12.22.20.28.51"));
    }
#endif

    // Help some branches that are on very few files.
    // The timestamps are the time of the split (usually
    // the same as the first commit on the branch).
    foreach(([
	      // src/modules/Image/polygon.c 1.1.2.1
	      "Image_polygon":"98.04.29.22.10.19",
	      // src/modules/Image/Makefile 1.16 (two files)
	      "hubbes_image_polygon":"98.04.29.22.02.05",
	      // src/modules/Image/polyfill.c 1.10.2.1 (one file)
	      "heddas_polypatchar":"97.11.03.20.59.01",
	      // lib/modules/Standards.pmod/ASN1.pmod/Types.pmod 1.1.2.1
	      "nisses-certifikat-hack":"98.05.20.09.48.03",
	      // src/version.c 1.27.2.1 (one file)
	      "locked_for_mirar":"98.02.24.12.05.26",
	    ]); string branch; string timestamp) {
      if (rcs_file->tags[branch]) continue;
      string rev = find_revision(rcs_file, UNDEFINED, timestamp);
      if (!rev) {
	// File was created after the branch was split off.
	// Ensure that the file isn't merged into the branch.
	kill_branch(rcs_file, branch);
	continue;
      }
      string rev2 = find_revision(rcs_file, "", timestamp);
      if (rev2 && (rcs_file->revisions[rev2]->time >=
		   rcs_file->revisions[rev]->time)) {
	rev = rev2;
      }
      add_branch(rcs_file, branch, rev);
    }
  } else {
    // Clean up tags that belong to the 0.6 SSL3, Yabu and LDAP modules.
    if (has_prefix(path, "lib/modules/SSL.pmod/") ||
	has_prefix(path, "lib/modules/Yabu.pmod/")
	/*|| has_prefix(path, "lib/modules/Protocols.pmod/LDAP.pmod/")*/) {
      // The v0_6_*, pike_v0_6_* and roxen_1_3_ tags
      // belong to the Pike 0.6 branch.
      foreach(rcs_file->tags; string t; string r) {
	if (has_prefix(t, "v0_6_") || has_prefix(t, "v0_6-") ||
	    has_prefix(t, "pike_v0_6_") || has_prefix(t, "roxen_1_3_")) {
	  m_delete(rcs_file->tags, t);
	}
      }
      // The same for these tags.
      m_delete(rcs_file->tags, "platform_best_try");	// Only in SSL.
      m_delete(rcs_file->tags, "release_990531");	// In both.
      if (!has_prefix(path, "lib/modules/Yabu.pmod")) {
	// Yabu has a kill marker on this branch in 0.5.
	m_delete(rcs_file->tags, "nisses-certifikat-hack");	// SSL.
      }
    }
  }

  if (git->master_branch == "7.0") {
#if 0
    // Back-dating of Protocols.pmod/IMAP.pmod and GL.
    // They were originally developed in CVS modules, and merged in 7.0.
    if (has_prefix(path, "lib/modules/Protocols.pmod/IMAP.pmod/") ||
	has_prefix(path, "src/post_modules/GL/")) {
      // The times chosen here are the same as the ones used in the
      // corresponding calls of branch_dependancy() above, since neither
      // has any release tags for Pike 0.6.
      add_branch(rcs_file, "0.6", find_revision(rcs_file, UNDEFINED,
						"99.01.01.01.03.35"));
    }
#endif
  } else {
    // Clean up tags that belong to the 7.0 SSL3 module.
    if (has_prefix(path, "lib/modules/SSL.pmod/")) {
      // The ssl3.7.0.* and ssl3.2.0.* tags belong to the Pike 7.0 branch.
      foreach(rcs_file->tags; string t; string r) {
	if (has_prefix(t, "ssl3_7_0_") || has_prefix(t, "ssl3_2_0_") ||
	    has_prefix(t, "pike_v7_")) {
	  m_delete(rcs_file->tags, t);
	}
      }
      // The same for these tags.
      m_delete(rcs_file->tags, "ssl3_1_4_1");
      m_delete(rcs_file->tags, "roxen_1_4_38");
    }
  }

  if (git->master_branch == "7.2") {
    // Special casing of the split of 7.0 into 7.2 and nt-tools.
    append_revision(rcs_file, "nt-tools", UNDEFINED, "2001.01.16.12.00.00",
		    "hubbe", "The NT-tools are now in a separate repository.\n",
		    "dead");
  } else if (git->master_branch != "roxen/7.2") {
    // The ssl3.7.1.* tags belong to the Pike 7.2 branch.
    if (has_prefix(path, "lib/modules/SSL.pmod/")) {
      // Tags 24 and above are after the 7.2/7.3 split.
      for (int i = 24; i < 109; i++) {
	m_delete(rcs_file->tags, "ssl3_7_1_" + i);
      }
      // This tag got stuck on the wrong branch of SSL3.
      m_delete(rcs_file->tags, "v7_1_52");
    }
    // The _WhiteFish module was developed in a separate CVS module which
    // was used for multiple versions of Pike.
    if (has_prefix(path, "src/modules/_WhiteFish/")) {
      foreach(rcs_file->tags; string t; string r) {
	if (has_prefix(t, "v7_2_")) {
	  m_delete(rcs_file->tags, t);
	}
      }
    }
  }

  if (git->master_branch == "7.4") {
  } else if (git->master_branch != "roxen/7.4") {
    // The _WhiteFish module was developed in a separate CVS module which
    // was used for multiple versions of Pike.
    if (has_prefix(path, "src/modules/_WhiteFish/")) {
      foreach(rcs_file->tags; string t; string r) {
	if (has_prefix(t, "v7_4_") || has_prefix(t, "v7_3_")) {
	  m_delete(rcs_file->tags, t);
	}
      }
    }
  }

  if (git->master_branch == "7.6") {
    // The GSSAPI module was copied from Pike 7.4 after having
    // received quite a few Pike 7.4 release tags.
    if (has_prefix(path, "src/post_modules/GSSAPI/")) {
      foreach(rcs_file->tags; string t; string r) {
	if (has_prefix(t, "v7_4_")) {
	  m_delete(rcs_file->tags, t);
	}
      }
    }
  }

  if (git->master_branch == "nt-tools") {
    // Drop the Pike release tags from after the split from nt-tools.
    foreach(({ "v7_1_18", "v7_1_19", "v7_1_20",
	       "v7_1_38", "v7_1_39", "v7_3_6", }), string tag) {
      m_delete(rcs_file->tags, tag);
    }
  }

  if (has_prefix(path, "src/modules/_WhiteFish/") ||
      has_prefix(path, "lib/modules/Search.pmod/")) {
    // Clean up some tags that aren't relevant for Pike.
    foreach(rcs_file->tags; string t; string r) {
      if (has_prefix(t, "search_") || has_prefix(t, "whitefish_")) {
	m_delete(rcs_file->tags, t);
      }
    }
    m_delete(rcs_file->tags, "roxen_3_4_split_3_5");
    m_delete(rcs_file->tags, "split_3_3_to_3_4");
  }

  if (has_suffix(path, ".pbm") || has_suffix(path, ".pnm") ||
      has_suffix(path, ".ppm") || has_suffix(path, ".eps") ||
      has_suffix(path, ".raw")) {
    // .eps, .pbm, .pnm, .ppm and .raw files are binary!
    rcs_file->expand = "b";
  }
}

GitRepository.GitCommit filter_commits(GitRepository git,
				       GitRepository.GitCommit commit,
				       RCSFile.Revision rev)
{
  GitRepository.GitCommit master =
    git->git_refs[git->remote + git->master_branch];
  // If the commit is already on our branch, keep it.
  if (master && (commit->leaves & master->is_leaf)) return commit;

  // Special case for commits before the merge points.
  if (commit->leaves & pike_module_leaves) return commit;

  // Special case for commits on real cvs branches.
  if ((rev->revision != "1.1.1.1") &&
      (sizeof(rev->revision/".") > 2)) return commit;

  // If the commit isn't on our parent branch, refuse it.
  master = git->git_refs[git->remote + ([
      "0.6":"0.5",
      "7.0":"0.6",
      "7.2":"7.0",
      "7.4":"7.2",
      "7.6":"7.4",
      "7.8":"7.6",
      "nt-tools":"7.0",
    ])[git->master_branch]];
  if (master && !(commit->leaves & master->is_leaf)) return UNDEFINED;

  switch (git->master_branch) {
  case "0.6":
    // lib/modules/Protocols.pmod/X.pmod/Xlib.pmod 1.1
    // 97.12.22.20.28.51
    if (commit->timestamp > 882822531) return UNDEFINED;
    break;
  case "7.0":
    // .cvsignore 1.15
    // 99.01.01.01.03.23
    if (commit->timestamp > 915152603) return UNDEFINED;
    break;
  case "7.2":
    // ANNOUNCE 1.6
    // 2000.04.11.18.33.47
    if (commit->timestamp > 955478027) return UNDEFINED;
    break;
  case "7.4":
    // src/version.h 1.269
    // 2001.01.30.07.10.57
    if (commit->timestamp > 980838657) return UNDEFINED;
    break;
  case "7.6":
    // src/version.h 1.334
    // 2002.12.05.17.55.35
    if (commit->timestamp > 1039110935) return UNDEFINED;
    break;
  case "7.8":
    // src/version.h 1.359
    // 2004.04.26.00.13.32
    if (commit->timestamp > 1082938412) return UNDEFINED;
    break;

  case "nt-tools":
  case "0.5":
  case "ulpc":
  default:
    break;
  }
  return commit;
}

void adjust_ext_histogram(GitRepository git, GitRepository.GitCommit commit,
			  mapping(string:array(multiset(string))) ext_hist)
{
  if (ext_hist["*.txt"]) {
    // We want *.txt to default to GIT_EXPAND_ALL.
    if (!ext_hist["*.txt"][GIT_EXPAND_ALL]) {
      // Add a few extra paths to be *really* sure...
      ext_hist["*.txt"][GIT_EXPAND_ALL] = (< "\0", "\0\0", >);
    }
    for (int f = GIT_EXPAND_BINARY; f < GIT_EXPAND_ALL; f++) {
      multiset(string) paths = ext_hist["*.txt"][f];
      if (paths) {
	ext_hist["*.txt"][GIT_EXPAND_ALL] |= paths;
      }
    }
  }
}

void create(GitRepository git, GitFlags flags)
{
  ::create(git, flags);

  string authors_file = combine_path(__FILE__, "../Pike-authors");
  if (Stdio.exist(authors_file)) {
    git->authors |= git->read_authors_file(authors_file);
  }

  string contributors_file = combine_path(__FILE__, "../Pike-real-authors");
  if (Stdio.exist(contributors_file)) {
    git->read_contributors_file(contributors_file);
  }
}
