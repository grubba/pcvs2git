// -*- Pike -*-
//
// Configuration file for generating the Search Git repository
// from the Search CVS repository.
//
// 2010-08-22 Henrik Grubbström

inherit "BranchDir.pcvs2git";

void rake_leaves(GitRepository git)
{
  foreach(git->git_refs; string ref; GitRepository.GitCommit r) {
    if (has_prefix(ref, "tags/search_")) {
      int maj, min;
      sscanf(ref, "tags/search_%d.%d.", maj, min);
      GitRepository.GitCommit branch =
	git->git_refs[git->remote + maj + "." + min];
      if (!branch) continue;
      branch->hook_parent(r);
    }
  }
}

void repair_rcs_file(GitRepository git, string path, RCSFile rcs_file,
		     GitFlags flags)
{
  string rev;
  rev = m_delete(rcs_file->tags, "whitefish-final-cvs");
  if (rev) {
    rcs_file->tags["whitefish-final-cvs/" + git->master_branch] = rev;
  }
  if (git->master_branch == "2.2") return;
  foreach(rcs_file->tags; string tag; string rev) {
    if (has_prefix(tag, "search_2_2_")) {
      string sub = tag[sizeof("search_2_2_")..];
      int sub_int = (int)sub;
      if (sub_int < 151) continue;
      if ((sub_int < 286) || git->master_branch == "2.4") {
	rcs_file->tags["search_2_4_" + sub] = rev;
      } else if ((sub_int < 313) || git->master_branch == "3.3") {
	rcs_file->tags["search_3_3_" + sub] = rev;
      } else {
	rcs_file->tags["search_3_4_" + sub] = rev;
      }
      m_delete(rcs_file->tags, tag);
    } else if (has_prefix(tag, "search_3_4_")) {
      if (git->master_branch == "3.4") continue;
      string sub = tag[sizeof("search_3_4_")..];
      int sub_int = (int)sub;
      if (sub_int < 407) continue;
      rcs_file->tags["search_3_5_" + sub] = rev;
      m_delete(rcs_file->tags, tag);
    } else if (has_prefix(tag, "search___")) {
      // The new dist builder was broken for a few days.
      string sub = tag[sizeof("search___")..];
      int sub_int = (int)sub;
      rcs_file->tags["search_4_1_" + (sub_int + 5)] = rev;
      m_delete(rcs_file->tags, tag);
    } else if (tag == "search_") {
      // The first of the above broken tags.
      rcs_file->tags["search_4_1_6"] = rev;
      m_delete(rcs_file->tags, tag);
    } else if (has_prefix(tag, "v7")) {
      rcs_file->tags["pike_" + tag] = rev;
      m_delete(rcs_file->tags, tag);
    }
  }
}

GitRepository.GitCommit filter_commits(GitRepository git,
				       GitRepository.GitCommit commit,
				       RCSFile.Revision rev)
{
  GitRepository.GitCommit master =
    git->git_refs[git->remote + git->master_branch];
  // If the commit is already on our branch, keep it.
  if (master && (commit->leaves & master->is_leaf)) return commit;

  // Special case for commits on real cvs branches.
  if ((rev->revision != "1.1.1.1") &&
      (sizeof(rev->revision/".") > 2)) return commit;

  // If the commit isn't on our parent branch, refuse it.
  master = git->git_refs[git->remote + ([
      "2.4":"2.2",
      "3.3":"2.4",
      "3.4":"3.3",
      "4.0":"3.4",
      "4.5":"4.0",
      "5.0":"4.5",
      "5.1":"5.0",
      "5.2":"5.1",
    ])[git->master_branch]];
  if (master && !(commit->leaves & master->is_leaf)) return UNDEFINED;

  switch (git->master_branch) {
  case "5.1":
    if (commit->timestamp > 1291043372) return UNDEFINED;
    break;
  case "5.2":
    if (commit->timestamp > 1295265769) return UNDEFINED;
    break;
  }
  return commit;
}

void create(GitRepository git, GitFlags flags)
{
  ::create(git, flags);

  string authors_file = combine_path(__FILE__, "../Pike-authors");
  if (Stdio.exist(authors_file)) {
    git->merge_authors(git->read_authors_file(authors_file));
  }

  authors_file = combine_path(__FILE__, "../Roxen-authors");
  if (Stdio.exist(authors_file)) {
    git->merge_authors(git->read_authors_file(authors_file));
  }

  string contributors_file = combine_path(__FILE__, "../Roxen-real-authors");
  if (Stdio.exist(contributors_file)) {
    git->read_contributors_file(contributors_file);
  }
}
